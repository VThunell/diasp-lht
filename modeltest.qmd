---
title: "Bayes learning" 
author: "Viktor Thunell" 
date: "`r format(Sys.time(),
'%d %B, %Y')`" 
  format: html: 
    page-layout: 
      full embed-resources: true knitr:
opts_chunk: 
fig.align: center out-width: 80% editor: source execute: echo: true
eval: true cache: true
---
## Load libraries
```{r libs}
#| message: false
#| warning: false
#| cache: false
# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools","viridis","nls.multstart", "broom", "patchwork", "rjags", "coda", "boot")
if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){
    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  }
invisible(lapply(pkgs, library, character.only = T))
options(ggplot2.continuous.colour = "viridis")
#theme_set(theme_grey()) # check why global theme option not working when rendering
# Set path
home <- here::here()

bird<-read_csv(paste0(home, "/R/exercise/bird_data.csv", header=T))
```
## Read data
```{r}
#| message: false
#| warning: false
#| cache: false
# Sötebasen Salmon
# problems(read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming-data/salmon/LaxindividerSötebasen.txt", locale = locale(encoding="latin1"), delim = "\t")) |>
#    dplyr::select(col, expected) |>
#    unique()
# read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming-data/salmon/LaxindividerSötebasen.txt", locale = locale(encoding="latin1"), delim = "\t")[,c(24,25,33)]
sb_salind <- read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming-data/salmon/LaxindividerSötebasen.txt", locale = locale(encoding="latin1"), delim = "\t", col_types = cols(Märkning2 = col_character(), Märke2Nr = col_character(), ÅlderLek3 = col_character())) %>%
  rename(age_ad = AdultÅlder,
         age_sm = SmoltÅlder,
         length = Längd,
         weight = Vikt,
         origin = Ursprung,
         sex = Kön,
         stage = Stadium)
str(sb_salind)
# REMEMBER TO CORRECT THESE THREE Columns if used!!
```

```{rgrid approximation}
theta <- c(R_0 = 3, D_inf = 2) # parameter vector
initState <- c(S = 999, I = 1, R = 0) # initial conditions
grid <- NULL # set aside to hold the grid approximation
# Loop through each value of R_0 we want to test.
for (testR0 in seq(1.6, 1.9, length.out = 25))
{
    # Set R_0 in theta accordingly
    theta[["R_0"]] <- testR0
    # Evaluate the log posterior associated with this R_0
    lp <- my_dLogPosterior(sirDeter, theta, initState, epi1)
    # Save this iteration, using rbind to add another row to the grid data frame
    grid <- rbind(grid, data.frame(R_0 = testR0, lp = lp))
}
```

```{r}
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom(x = 6 , size=9 , prob=p_grid )
plot(p_grid, likelihood)
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
p_grid <- seq( from=0 , to=1 , length.out=20 )
# define prior
prior <- rep( 1 , 20 )
# compute likelihood at each value in grid
likelihood <- dbinom(x = 6, size=9, prob=p_grid )
plot(p_grid, likelihood)
# compute product of likelihood and prior
unstd.posterior <- likelihood * prior
# standardize the posterior, so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid , posterior , type="b" ,
xlab="probability of water" , ylab="posterior probability" )
```
```{r}
n_samples <- 1000
p <- rep( NA , n_samples )
p[1] <- 0.5
W <- 6
L <- 3
for ( i in 2:n_samples ) {
p_new <- rnorm( 1 , p[i-1] , 0.1 )
if ( p_new < 0 ) p_new <- abs( p_new )
if ( p_new > 1 ) p_new <- 2 - p_new
q0 <- dbinom( W , W+L , p[i-1] )
q1 <- dbinom( W , W+L , p_new )
p[i] <- ifelse( runif(1) < q1/q0 , p_new , p[i-1] )
}
dens( p , xlim=c(0,1) )
curve( dbeta( x , W+1 , L+1 ) , lty=2 , add=TRUE )
```

```{r}
runif(1, 1.7, 1.8)
```
Moment matching - how the the mean and variation are linked to the distribution
paramteres
## Model sex ratio
Null model of proportion females in the whole database

$$prop_i~ \sim Beta(a, b)$$
$$logit(\mu_i) = \alpha + \beta x_i$$
$$a_i = \frac{(\mu_i^2 - \mu_i^3 - \mu_i\sigma^2)} {\sigma^2}$$
$$b_i = \frac{(\mu_i - 2\mu_i^2 + \mu_i^3 - \sigma^2+ \mu_i\sigma^2)} {\sigma^2}$$
Priors

$$ \alpha ~ \sim beta(1, 1)$$
```{r}
dbeta(1,1,1)

```

```{r}
library("brms")
dat <- sb_salind %>%
  filter(!sex %in% c("iu","o",NA),
         !VattenNamn %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult") %>%
  count(sex, VattenNamn, origin) %>%
  mutate(freq = prop.table(n), .by = c(VattenNamn, origin) ) %>%
  #pivot_wider(id_cols = c(VattenNamn,sex), names_from = origin, values_from = freq) %>%
  filter(sex == "f",
         freq < 1)
  
summary(dat$freq)

fit1 <- brm(formula = freq ~ 1, 
            data = dat, family = Beta(link = "logit")),
            warmup = 1000, iter = 2000, chains = 4,
            control = list(adapt_delta = 0.95))

summary(fit1)
#prior = c(set_prior("Beta(1,1)", class = "b"))
exp(0.05)/(1+exp(0.05))

```

```{r rjags model}


```

