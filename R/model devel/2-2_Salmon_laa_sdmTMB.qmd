---
title: "Length at age time series salmon"
author: "Viktor Thunell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r libs}
#| message: false
#| warning: false
#| cache: false

remotes::install_github("pbs-assess/sdmTMBextra", dependencies = TRUE)

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools", "sdmTMB", "viridis", "patchwork", "sdmTMBextra") 
# pkgs <- c("tidyverse", "tidylog", "devtools", "sdmTMB", "terra", "mapplots",
#           "viridis", "visreg", "modelr", "future", "kableExtra", "ggh4x", "patchwork",
#           "purrr", "furrr") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){

    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  s
  }

invisible(lapply(pkgs, library, character.only = T))

# Import some plotting functions
# Source code for map plots
# You need:
# devtools::install_github("seananderson/ggsidekick") # not on CRAN; library(ggsidekick)
devtools::source_url("https://raw.githubusercontent.com/VThunell/diasp-lht/main/R/functions/map-plot.R")
#remotes::install_github("pbs-assess/sdmTMB", dependencies = TRUE)
#library(ggsidekick)

options(ggplot2.continuous.colour = "viridis")
theme_set(theme_sleek())

# Set path
home <- here::here()
packageVersion("sdmTMB")
```


## Read data

```{r}
#| message: false
#| warning: false
#| cache: false

sallaa.all <- readRDS(file = paste0(home,"/data/data-for-2-2/salmon-laa_2025-09-04.RData")) %>%
  rename(year = fi_year,
         site = sai_location,
         sea.age = sea_age_year,
         juv.age = juvenile_age_year,
         lat = fisa_y_4326,
         lon = fisa_x_4326) %>%
  #filter out non-aged individuals (~34000 individuals)
  filter(!(is.na(sea.age) & is.na(juv.age)))

sal.df <- sallaa.all %>%
  add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633) %>%
  filter(!is.na(year))

# read prediction grid
 pred_grid <- readRDS(paste0(home, "/data/pred_grid.rds"))

# sallaa.all <- df %>% 
#   filter(rpw_tot > 0 & rpw_tot < q99,
#          !is.na(day_of_year)) %>%
#   mutate(depth_sc = (depth - mean(depth))/sd(depth),
#          year_f = as.factor(year),
#          month_f = as.factor(month),
#          ices_rect = as.factor(ices_rect),
#          pred_length_sc = (pred_length - mean(pred_length)) / sd(pred_length),
#          doy_sc = (day_of_year - mean(day_of_year))/sd(day_of_year),
#          decade = round(year/10) * 10,
#          oxy_sc = (oxy - mean(oxy, na.rm = TRUE))/sd(oxy, na.rm = TRUE),
#          sal_sc = (sal - mean(sal, na.rm = TRUE))/sd(sal, na.rm = TRUE),
#          temp_sc = (temp - mean(temp, na.rm = TRUE))/sd(temp, na.rm = TRUE)) %>% 
#   rowwise() %>% 
#   mutate(tot = sum(other, other_inverts, other_chords, saduria, sprat, herring)) %>%
#   ungroup()
# 
# 
# glimpse(df)

```

## Filter

```{r}

# Hists of age and length
# If dropping all inds where both sea and sm age is NA
sallaa %>% 
  ggplot() +
  geom_histogram(aes(x = juv.age), fill = "deeppink", alpha = 0.5) +
  geom_histogram(aes(x =juv.age+sea.age), fill = "grey", alpha = 0.5) +
  xlim(0, 13) 

sallaa %>% 
  ggplot() +
  geom_histogram(aes(x = length_mm), fill = "deeppink", alpha = 0.5) +
#  xlim(0, 13) %>%
  facet_wrap(~age.type)

sallaa %>% 
  mutate(tot.age =juv.age+sea.age) %>% 
  ggplot(aes(year,tot.age, color = age.type)) +
  geom_point() +
  stat_smooth(method = "gam", formula = y ~ s(x, k=3)) +
  facet_wrap(~spat.unit)

sallaa %>% 
  mutate(tot.age =juv.age+sea.age) %>% 
  ggplot(aes(year,length_mm, color = age.type)) +
  geom_point() +
  stat_smooth(method = "gam", formula = y ~ s(x, k=3)) +
  facet_wrap(~spat.unit)

# sallaa %>% 
#   ggplot() + 
#   geom_density(aes(x = length_mm), fill = "deeppink", alpha = 0.5)
# 
# sallaa %>% 
#   ggplot() +
#   geom_density(aes(x = length_mm, fill = factor(sea.age)), alpha = 0.5) +
#   #geom_histogram(aes(x = length)) +
#   facet_wrap(~juv.age+sea.age, scales = "free")
# 
# sallaa %>% 
#   filter(.age == 0) %>%
#   ggplot() +
#   geom_density(aes(x = length_mm, fill = factor(juv.age+sea.age)), alpha = 0.5)
# 
# # age at smolification
# sallaa %>% 
#   ggplot() +
#   geom_density(aes(x = juv.age, color = spat.unit),  alpha = 0.5) +
#   facet_wrap(~spat.unit) +
#   xlim(-1, 5) 
# 
# sallaa %>%
#   filter(age.type == "juve.only") %>%
#   ggplot(aes(x = juv.age, y =length_mm, color = spat.unit)) +
#   geom_point(alpha = 0.5) +
#   geom_smooth(method = lm) +
#   facet_wrap(~spat.unit)

```


## Mean length

```{r}
sallaa %>% 
  group_by(year, spat.unit) %>% 
  summarise(mean_length = mean(length_mm),
            sd_length = sd(length_mm)) %>%
  ggplot(aes(year, mean_length)) +
  geom_line() +
  geom_ribbon(aes(ymin = mean_length - sd_length, ymax = mean_length + sd_length), color = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(sallaa$year, na.rm = TRUE), max(sallaa$year, na.rm = TRUE), by = 10)) +
  facet_wrap(~spat.unit)

sallaa %>% 
  ggplot(aes(juv.age, mean_length)) +
  geom_line() +
  geom_ribbon(aes(ymin = mean_length - sd_length, ymax = mean_length + sd_length), color = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(sallaa$year, na.rm = TRUE), max(sallaa$year, na.rm = TRUE), by = 10)) +
  facet_wrap(~spat.unit)
```

## Fit models 

### Filter data for models
```{r fit Mods}
sal.temp <- sal.df %>%
  filter(#age.type == "both",
         !age.type == "sea.only",
         year > 1992,
         #!is.na(sex)
         ) %>%
  mutate(sea.age = if_else(is.na(sea.age), 0, sea.age), 
         tot.age = juv.age+sea.age,
         tot.age_f = factor(tot.age),
         tot.age_sc = (tot.age - mean(tot.age, na.rm = TRUE))/sd(tot.age, na.rm = TRUE),
         tot.age_sc2 = tot.age_sc^2,
         year_f = factor(year),
         year_sc = (year - mean(year, na.rm = TRUE))/sd(year, na.rm = TRUE),
         spat.unit = factor(spat.unit)
         ) %>%
  filter(tot.age < 12) %>%
  mutate(tot.age_f = fct_drop(tot.age_f))

sum(is.na(sal.temp$tot.age_f))
unique(sal.temp$tot.age_f)
```

```{r mesh and data}
mesh_s <- make_mesh(sal.temp, c("X", "Y"), cutoff = 10)
plot(mesh_s)
```


```{r}
sm_sm2 <- 
  sdmTMB(
    data = sal.temp,
    formula = length_mm ~ age.type + tot.age_f + s(year_sc, by = tot.age_f), 
    #formula = length_mm ~ age.type + tot.age_f + spat.unit + s(year_sc, by = tot.age_f), 
    #formula = length_mm ~ age.type + spat.unit + s(year_sc, tot.age_sc, by = spat.unit), 
    #formula = length_mm ~ age.type + tot.age_f + spat.unit + s(year_sc, by = c(tot.age_f,spat.unit)), # nope 
    mesh = mesh_s,
    spatial = "on",
    spatiotemporal = "iid",
    time = "year",
    family = Gamma(link = "log")
    )
sanity(sm_sm) # ln_smooth_sigma for age 0 is large, little data?
exp(sm_sm$par$ln_smooth_sigma) # ln_smooth_sigma for age 0 is much larger than the other.
AIC(sm_sm2)

grid_s <- expand.grid("age.type" = unique(sm_sm$data$age.type),
                      "tot.age_f" = unique(sm_sm$data$tot.age_f),
                      "year_sc" = seq(min(sm_sm$data$year_sc),
                                       max(sm_sm$data$year_sc),
                                       length.out = length(unique(sm_sm$data$year_sc))),
                      "year" = seq(min(sm_sm$data$year),
                                 max(sm_sm$data$year),
                                 length.out = length(unique(sm_sm$data$year))))

pred_sp <-predict(sm_sm, newdata = grid_s, re_form = NA)
```


```{r}

# minmax of ages per age type
sm_sm$data %>%
  summarise(mina = min(tot.age), maxa = max(tot.age), .by = age.type)
  
pred_sp %>%
  mutate(year = round(year_sc*sd(sm_sm$data$year) + mean(sm_sm$data$year), 3)) %>%
  filter(!(!tot.age_f %in% (1:11) & age.type == "both"),
         !(!tot.age_f %in% (0:5) & age.type == "juve.only")) %>%
  # filter(!(tot.age_f %in% c(5:12) & age.type == "juve.only"),
  #        ) %>%
  ggplot() + 
  geom_line(aes(year, exp(est), color = tot.age_f)) +
  facet_wrap(~age.type, scales = "free_y")

# NEED MORE RAM FOR THE FOLLOWING...
# spat_grid_s <- pred_grid %>%
#   mutate(tot.age_f = factor(2),
#          age.type = "juve.only") %>% #unique(sm_sm$data$age.type),) %>%
#   replicate_df("year_sc", unique(sm_sm$data$year_sc)) %>%
#   mutate(year = 2000)
# 
# predi_st <- predict(sm_sm, newdata = spat_grid_s, re_form = NULL, return_tmb_object = TRUE)
# 
# # plot the spatial field
# pred_sxy %>%
#   ggplot()) +
#   geom_raster()
#   scale_fill_gradient2() +
#   ggtitle("Spatial random effects only")
```


```{r fit Mods}
# reduce number of years to reduce fitting time
# df_tot_sel <- df_tot %>% filter( year %in% c(2012:2022))
# mesh_tot_sel <- make_mesh(df_tot, c("X", "Y"), cutoff = 6)

# missing years
# my <- min(sal.temp$year):max(sal.df$year)
# missing_years <- my[!my %in% unique(sal.df$year)]

Mod_n1a <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 1 + tot.age_f,
  #time_varying = ~ 1,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  #family = Gamma(link = "log")
  family = gaussian()
)

Mod_n1b <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ tot.age_sc,
  #time_varying = ~ 1,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  family = Gamma(link = "log")
)

Mod_n1_sua <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ tot.age_sc + year_sc + spat.unit,
  #time_varying = ~ 1,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  family = gaussian()
)

Mod_n1_sub <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ tot.age_f + year_sc + spat.unit,
  #time_varying = ~ 1,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  family = gaussian()
)

Mod_n1_suc <-  
  sdmTMB( 
  data = sal.temp,
  formula = length_mm ~ tot.age_f*year_sc + spat.unit,
  #time_varying = ~ 1,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  family = gaussian()
)

# n2 models uses time varying instead of year in main formula
Mod_n2a <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_f,
  time_varying_type = "rw",
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = gaussian()
)

Mod_n2aa <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_f,
  time_varying_type = "rw0",
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = gaussian()
)

Mod_n2b <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0 + spat.unit,
  time_varying = ~ 1 + tot.age_f,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = gaussian()
)

Mod_n2c <- 
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_f + spat.unit,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = gaussian()
)

# using gamma and modelling age as scaled or a polynomial
Mod_n3 <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_sc,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = Gamma(link = "log")
)

Mod_n3_su <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ tot.age_sc + tot.age_sc2 + spat.unit,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = Gamma(link = "log")
)

Mod_n3_s <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0 + s(tot.age_sc, year_sc),
  #formula = length_mm ~ 0 + s(year_sc, tot.age_sc) + tot.age_f,
  #time_varying = ~ 1 + tot.age_sc,
  mesh = mesh_len,
  spatial = "off",
  spatiotemporal = "off",
  time = "year",
  family = Gamma(link = "log")
)

# adding spatial random fields
Mod_n4a <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_f,
  mesh = mesh_len,
  spatial = "on",
  spatiotemporal = "off",
  time = "year",
  family = Gamma(link = "log")
)

Mod_n4b <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_sc + tot.age_sc2, #sanity issue but much lower AIC
  mesh = mesh_len,
  spatial = "on",
  spatiotemporal = "off",
  time = "year",
  family = Gamma(link = "log")
)

# ...and spatiotemporal rf
Mod_n5a <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_f, 
  mesh = mesh_len,
  spatial = "on",
  spatiotemporal = "iid",
  time = "year",
  family = Gamma(link = "log")
  #family = gaussian()
)

Mod_n5b <-
  sdmTMB(
  data = sal.temp,
  formula = length_mm ~ 0,
  time_varying = ~ 1 + tot.age_sc,
  mesh = mesh_len,
  spatial = "on",
  spatiotemporal = "iid",
  time = "year",
  family = Gamma(link = "log")
) 

```

## Check models
```{r check Mods}
sanity(Mod_n1a)
sanity(Mod_n1b)
sanity(Mod_n1_sua)
sanity(Mod_n1_sub)
sanity(Mod_n1_suc) # no 
sanity(Mod_n2a)
sanity(Mod_n2aa)
sanity(Mod_n2b)
sanity(Mod_n2c)
sanity(Mod_n3)
sanity(Mod_n3_su)
sanity(Mod_n4a)
sanity(Mod_n4b)
sanity(Mod_n5a) 
sanity(Mod_n5b) # works 

AIC(Mod_n1a)
AIC(Mod_n1b)
AIC(Mod_n1_sua)
AIC(Mod_n1_sub)
AIC(Mod_n2a)
AIC(Mod_n2aa)
AIC(Mod_n2b)
AIC(Mod_n2c) #1237403
AIC(Mod_n3)
AIC(Mod_n3_su) #1234...
AIC(Mod_n3_s)
AIC(Mod_n4a) # lowest
AIC(Mod_n4b) 
AIC(Mod_n5b) # 2nd best

summary(Mod_n4a)

tidy(Mod_n5, effects = "ran_par", conf.int = TRUE)

#dharma
rgsime <- simulate(Mod_n4a, nsim = 1000, type = 'mle-mvn')
dharma_residuals(rgsime, Mod_n4a)
#mle
Mod_n4a$resids <- residuals(Mod_n4a)
qqnorm(Mod_n4a$resids)
qqline(Mod_n4a$resids)
#mcmc
samps <- sdmTMBextra::predict_mle_mcmc(Mod_n4a, mcmc_warmup = 100, mcmc_iter = 101)
r <- residuals(Mod_n4a, "mle-mcmc", mcmc_samples = samps)
qqnorm(r[is.finite(r)])
qqline(r[is.finite(r)])

# ggplot(Mod_n5, aes(X, Y)), col = resids)) +
#   scale_colour_gradient2() +
#   geom_point() +
#   facet_wrap(~year) +
#   coord_fixed()

```

## Predict

```{r}
grid_n4 <- expand.grid("tot.age_f" = unique(Mod_n4a$data$tot.age_f),
                       "year" = seq(min(Mod_n4a$data$year),
                                 max(Mod_n4a$data$year),
                                 length.out = length(unique(Mod_n4a$data$year))))
                    
# grid_3 <- expand.grid("tot.age_sc" = seq(min(Mod_n5$data$tot.age_sc),
#                                        max(Mod_n5$data$tot.age_sc),
#                                        length.out = 10),
#                     "tot.age_sc2" = seq(min(Mod_n5$data$tot.age_sc)^2,
#                                        max(Mod_n5$data$tot.age_sc)^2,
#                                        length.out = 10),
#                     "year" = seq(min(Mod_n5$data$year),
#                                  max(Mod_n5$data$year),
#                                  length.out = length(unique(Mod_n5$data$year))),
#                     "spat.unit" = unique(Mod_n5$data$spat.unit))
# 
# grid_5 <- expand.grid("tot.age_sc" = seq(min(Mod_n5$data$tot.age_sc),
#                                        max(Mod_n5$data$tot.age_sc),
#                                        length.out = 10),
#                       "year" = seq(min(Mod_n5$data$year),
#                                  max(Mod_n5$data$year),
#                                  length.out = length(unique(Mod_n5$data$year)))) %>%
#   mutate(tot.age_sc2 = tot.age_sc^2)
  

spat_grid_4 <- pred_grid %>%
   mutate(tot.age_f = 5) %>%
  #        tot.age_sc2 = 18) %>%
  #replicate_df("tot.age_f", unique(Mod_n4a$data$tot.age_f)) %>%
  replicate_df("year", unique(Mod_n4a$data$year))

spat_grid_5 <- pred_grid %>%
  mutate(tot.age_sc = 0,
         tot.age_sc2 = 18)

# !!HERE, r crahses when predicting...

# for including spat/spattemp random effects in predicts
predi_n4 <- predict(Mod_n4a, newdata = spat_grid_4, re_form = NULL, return_tmb_object = TRUE)
#predi_n3su <- predict(Mod_n3_su, newdata = spat_grid_3, re_form = NULL) # r 

# for not including spat/spatioemp random effects in predicts
pop_predi_n4 <- predict(Mod_n4a, newdata = grid_n4, re_form = NA)
pop_predi_n3 <- predict(Mod_n3_su, newdata = grid_3, re_form = NA)

```

```{r}
# population level predictions
pop_predi_n4 %>%
  #mutate(tot.age = round(tot.age_sc*sd(Mod_n5$data$tot.age) + mean(Mod_n5$data$tot.age), 1)) %>%
  ggplot(aes(year, exp(est), color = tot.age_f)) +
  geom_line() +
  facet_wrap(~tot.age_f)

pop_predi_n5 %>%
  mutate(tot.age = round(tot.age_sc*sd(Mod_n5$data$tot.age) + mean(Mod_n5$data$tot.age), 1)) %>%
  ggplot(aes(tot.age, est, color = factor(year))) +
  geom_line()

# spatial predictions
pop_predi_n4 %>%
  #mutate(tot.age = round(tot.age_sc*sd(Mod_n5$data$tot.age) + mean(Mod_n5$data$tot.age), 1)) %>%
  ggplot(aes(year, exp(est), color = tot.age_f)) +
  geom_line() +
  facet_wrap(~tot.age_f)

pop_predi_n5 %>%
  mutate(tot.age = round(tot.age_sc*sd(Mod_n5$data$tot.age) + mean(Mod_n5$data$tot.age), 1)) %>%
  ggplot(aes(tot.age, est, color = factor(year))) +
  geom_line()

```
```{r}

predi_n5$data <- predi_n5$data |>
  group_by(decade = round(year/10)*10, X, Y) |>
  mutate(dec_mean_est = mean(est)) |> # estimate
  mutate(dec_mean_enrf = mean(est_non_rf)) |> # non random (fixed) effects 
  mutate(dec_mean_erf = mean(est_rf)) |> # random effects
  mutate(dec_mean_eps = mean(epsilon_st)) |> #random spatial and spatiotemporal
  ungroup()

predi_n5$data |>
  pivot_longer(cols = c("est","est_non_rf","est_rf"), names_to = "type", values_to = "vest") |>
  ggplot(aes(exp(vest))) +
  facet_wrap(~type, ncol = 2, scales = "free") +
  geom_histogram(bins = 100)

# estimate
plot_map_fc +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = exp(dec_mean_est))) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis(trans = "sqrt") +
  ggtitle("Estimate, decadal mean estimate")

# Fixed eff, i.e. rpw_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, time_varying = ~ 1 + pred_length_sc,
plot_map_fc +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = exp(dec_mean_enrf))) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis(trans = "sqrt") +
  ggtitle("Non random fields, decadal mean estimate")

predi_n5$data |>
  pivot_longer(cols = c("omega_s", "epsilon_st"), names_to = "type", values_to = "vest") |>
  ggplot(aes(exp(vest))) +
  facet_wrap(~type, ncol = 2, scales = "free") +
  geom_histogram(bins = 100)

# spatial and spatiotemporal fields
plot_map_fc +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = exp(dec_mean_erf))) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() +
  ggtitle("all random fields, decadal mean estimate")

# spatial random fields
ggplot() +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = omega_s)) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() +
  labs( title = "Spatial random effects") +
plot_map_Euro +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = omega_s)) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() 

# spatiotemporal random effects
ggplot() +
  #plot_map_fc +
  #geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = exp(dec_mean_eps))) +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = exp(epsilon_st))) +
  facet_wrap(~year) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() +
  ggtitle("spatiotemporal random intercept, decadal mean estimate")

plot_map_Euro +
  geom_raster(data = predi_n5$data, aes(X*1000, Y*1000, fill = epsilon_st1+epsilon_st2)) +
  #geom_raster(data = plotdf, aes(X*1000, Y*1000, fill = dec_mean_eps)) +
  #facet_grid(prey_group_f~year) +#, labeller = labeller(prey_group_f = preygroups)) +
  facet_wrap(~year, ncol=5) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() #+
#  labs( title = "Decadal mean spatiotemporal random effects")


```


## Plot coefficient estimates

```{r extract coefficients, message=FALSE}

# Extract random and fixed coefficients from the full model
n5_est <- bind_rows(tidy(Mod_n5, effects = "ran_par", conf.int = TRUE) %>%
                         filter(term %in% c("sigma_O", "sigma_E")))

# Plot effects

ggplot(n5_est, aes( estimate, term)) +
  geom_vline(xintercept = 0, linetype = 2, color = "gray40", alpha = 0.5) +
  geom_errorbar(aes(xmin = conf.low, xmax = conf.high), width = 0) +
  geom_point(size = 2.5) +
  labs(y = "Estimate", x = "Standardized coefficient") +
  guides(color = "none", fill = "none", shape = guide_legend(ncol = 2))

#ggsave("figures/main/effect_size.pdf", width = 17, height = 12, units = "cm")

```
## Map of spatiotemporal random fields

```{r}
tv <- pred$data

plotdf <- 
  Mod_n5$data %>%
  mutate(decade = round(year/10) * 10) |>
  mutate(dec_mean_eps = mean(epsilon_st1+epsilon_st2, na.omit = TRUE), .by =
  c(decade, X, Y)) #random spatial and spatiotemporal
  
plot_map_fc +
  #geom_raster(data = plotdf, aes(X*1000, Y*1000, fill = epsilon_st1+epsilon_st2)) +
  geom_raster(data = plotdf, aes(X*1000, Y*1000, fill = epsilon_st1+epsilon_st2)) +
  #geom_raster(data = plotdf, aes(X*1000, Y*1000, fill = dec_mean_eps)) +
  #facet_grid(prey_group_f~year) +#, labeller = labeller(prey_group_f = preygroups)) +
  facet_wrap(~year, ncol=5) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() #+
#  labs( title = "Decadal mean spatiotemporal random effects")

```


```{r plot coefficients for Mod}

# Coefficient estimate of year
Mod_n_tv_est <- as.list(Mod_n5$sd_report, "Estimate")
Mod_n_tv_se <- as.list(Mod_n$sd_report, "Std. Error")

Mod_s_tv_est <- as.list(Mod_s$sd_report, "Estimate")
Mod_s_tv_se <- as.list(Mod_s$sd_report, "Std. Error")

Mod_tv_est <- as.list(Mod_st$sd_report, "Estimate")
Mod_tv_se <- as.list(Mod_st$sd_report, "Std. Error")

y_n_Mod <- tibble(year = my, coef.est = Mod_n_tv_est$b_rw_t[,1,], coef.se = Mod_n_tv_se$b_rw_t[,1,], model = "nos")
y_s_Mod <- tibble(year = my, coef.est = Mod_s_tv_est$b_rw_t[,1,], coef.se = Mod_s_tv_se$b_rw_t[,1,], model = "spatial")
y_Mod <- tibble(year = my, coef.est = Mod_tv_est$b_rw_t[,1,], coef.se = Mod_tv_se$b_rw_t[,1,], model = "spatiotemporal")

bind_rows(y_s_Mod, y_n_Mod, y_Mod) %>% 
  ggplot(aes(year, exp(coef.est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se)^2, ymax = exp(coef.est+1.96*coef.se)^2), color = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for year") # the cf gets very large for the missing year

# Coefficient of pred length varying with year
ypl_Mod_n <- data.frame(year = my, coef.est = Mod_n_tv_est$b_rw_t[,2,], coef.se = Mod_n_tv_se$b_rw_t[,2,], model = "nos")
ypl_Mod_s <- data.frame(year = my, coef.est = Mod_s_tv_est$b_rw_t[,2,], coef.se = Mod_s_tv_se$b_rw_t[,2,], model = "spatial")
ypl_Mod <- data.frame(year = my, coef.est = Mod_tv_est$b_rw_t[,2,], coef.se = Mod_tv_se$b_rw_t[,2,], model = "spatiotemporal")
bind_rows(ypl_Mod, ypl_Mod_s, ypl_Mod_n) %>%
ggplot(aes(year, exp(coef.est)^2, fill = model, color = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(coef.est-1.96*coef.se)^2, ymax = exp(coef.est+1.96*coef.se)^2), color = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("est for pred.length") 


```



## Conditional effects 

```{r conditional fixed effects}
# Conditional effect of depth_sc
nd_dsc <- data.frame(year = 1993, depth_sc = seq(min(df_tot$depth_sc), max(df_tot$depth_sc), length.out = 50), pred_length_sc = 0, doy_sc = 0, oxy_sc = 0, sal_sc = 0, temp_sc = 0, density_cod_sc = 0)

p_n_dsc <- predict(Mod_n, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
p_s_dsc <- predict(Mod_s, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
p_st_dsc <- predict(Mod_st, newdata = nd_dsc, re_form = NA, se_fit = TRUE)

p_n_dsc$model = "nos" 
p_s_dsc$model = "spatial"
p_st_dsc$model = "spatiotemporal"

dep <- bind_rows(p_n_dsc, p_s_dsc, p_st_dsc) %>% 
  ggplot(aes(depth_sc, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  ylab("cond. effect depth_sc") 

# Conditional effect of s(doy_sc)
nd_doysc <- data.frame(year = 1993, depth_sc = 0, pred_length_sc = 0, doy_sc = seq(min(df_tot$doy_sc), max(df_tot$doy_sc), length.out = 50), oxy_sc = 0, sal_sc = 0, temp_sc = 0, density_cod_sc = 0)

p_n_doysc <- predict(Mod_n, newdata = nd_doysc, re_form = NA, se_fit = TRUE)
p_s_doysc <- predict(Mod_s, newdata = nd_doysc, re_form = NA, se_fit = TRUE)
p_st_doysc <- predict(Mod_st, newdata = nd_doysc, re_form = NA, se_fit = TRUE)

p_s_doysc$doy_sc[which.max(exp(p_s_doysc$est))] # scaled day of maximum rpw

p_n_doysc$model = "nos" 
p_s_doysc$model = "spatial"
p_st_doysc$model = "spatiotemporal"

doy <- bind_rows(p_n_doysc, p_s_doysc, p_st_doysc) %>%
  ggplot(aes(doy_sc, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  ylab("cond. effect doy_sc") 

# Conditional effect of oxy

nd_osc <- data_frame(year = 1993, depth_sc = 0, length.out = 50, pred_length_sc = 0, doy_sc = 0, oxy_sc = seq(min(df_tot$oxy_sc), max(df_tot$oxy_sc), length.out = 50), sal_sc = 0, temp_sc = 0, density_cod_sc = 0)

p_n_osc <- predict(Mod_n, newdata = nd_osc, re_form = NA, se_fit = TRUE)
p_s_osc <- predict(Mod_s, newdata = nd_osc, re_form = NA, se_fit = TRUE)
p_st_osc <- predict(Mod_st, newdata = nd_osc, re_form = NA, se_fit = TRUE)

p_n_osc$model = "nos" 
p_s_osc$model = "spatial"
p_st_osc$model = "spatiotemporal"

oxy <- bind_rows(p_n_osc, p_s_osc, p_st_osc) %>% 
  ggplot(aes(oxy_sc, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  ylab("cond. effect oxy_sc") 

# Conditional effect of temp

nd_tsc <- data_frame(year = 1993, depth_sc = 0, length.out = 50, pred_length_sc = 0, doy_sc = 0, oxy_sc = 0, sal_sc = 0, temp_sc = seq(min(df_tot$temp_sc), max(df_tot$temp_sc), length.out = 50), density_cod_sc = 0)

p_n_tsc <- predict(Mod_n, newdata = nd_tsc, re_form = NA, se_fit = TRUE)
p_s_tsc <- predict(Mod_s, newdata = nd_tsc, re_form = NA, se_fit = TRUE)
p_st_tsc <- predict(Mod_st, newdata = nd_tsc, re_form = NA, se_fit = TRUE)

p_n_tsc$model = "nos" 
p_s_tsc$model = "spatial"
p_st_tsc$model = "spatiotemporal"

temp <- bind_rows(p_n_tsc, p_s_tsc, p_st_tsc) %>% 
  ggplot(aes(temp_sc, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  ylab("cond. effect temp_sc") 

# Conditional effect of salinty

nd_ssc <- data_frame(year = 1993, depth_sc = 0, length.out = 50, pred_length_sc = 0, doy_sc = 0, oxy_sc = 0, sal_sc =  seq(min(df_tot$sal_sc), max(df_tot$sal_sc), length.out = 50), temp_sc = 0, density_cod_sc = 0)

p_n_ssc <- predict(Mod_n, newdata = nd_ssc, re_form = NA, se_fit = TRUE)
p_s_ssc <- predict(Mod_s, newdata = nd_ssc, re_form = NA, se_fit = TRUE)
p_st_ssc <- predict(Mod_st, newdata = nd_ssc, re_form = NA, se_fit = TRUE)

p_n_ssc$model = "nos" 
p_s_ssc$model = "spatial"
p_st_ssc$model = "spatiotemporal"

sal <- bind_rows(p_n_ssc, p_s_ssc, p_st_ssc) %>% 
  ggplot(aes(sal_sc, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  ylab("cond. effect sal_sc") 

# Conditional effect of density
# nd_dcsc <- data.frame(year = 1993, depth_sc = 0, pred_length_sc = 0, doy_sc = 0, oxy_sc = 0, sal_sc = 0, temp_sc = 0, density_cod_sc =  seq(min(df_tot$density_cod_sc), max(df_tot$density_cod_sc)))
# 
# p_n_dcsc <- predict(Mod_n, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
# p_s_dcsc <- predict(Mod_s, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
# p_st_dcsc <- predict(Mod_st, newdata = nd_dsc, re_form = NA, se_fit = TRUE)
# 
# p_n_dcsc$model = "nos" 
# p_s_dcsc$model = "spatial"
# p_st_dcsc$model = "spatiotemporal"
# 
# den <- bind_rows(p_n_dcsc, p_s_dcsc, p_st_dcsc) %>% 
#   ggplot(aes(density_cod_sc, exp(est)^2, color = model, fill = model)) +
#   geom_line() +
#   geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
#   ylab("cond. effect depth_sc") 

# plot
dep + doy + oxy + temp + sal + plot_layout(guides = "collect")
ggsave("figures/main/fixed_effect_size.pdf", width = 20, height = 12, units = "cm")

```

```{r conditional effects year}
#pred_grid
nd_year <- data.frame(year = my, depth_sc = 0, pred_length_sc = 0, doy_sc = 0, 
                      oxy_sc = 0, sal_sc = 0, temp_sc = 0)

p_n_year <- predict(Mod_n, newdata = nd_year, re_form = NA, se_fit = TRUE)
p_s_year <- predict(Mod_s, newdata = nd_year, re_form = NA, se_fit = TRUE)
p_st_year <- predict(Mod_st, newdata = nd_year, re_form = NA, se_fit = TRUE)

p_n_year$model = "nos" 
p_s_year$model = "spatial"
p_st_year$model = "spatiotemporal"

bind_rows(p_n_year, p_s_year, p_st_year) %>% 
  ggplot(aes(year, exp(est)^2, color = model, fill = model)) +
  geom_line() +
  geom_ribbon(aes(ymin = exp(est-1.96*est_se)^2, ymax = exp(est+1.96*est_se)^2), color = NA, alpha = 0.3) +
  scale_x_continuous(breaks = seq(min(df_tot$year), max(df_tot$year), by = 10)) +
  ylab("cond. effect of year") 

```

# Index 

## Biomass weighted index

```{r}
pred_grid <- readRDS(paste0(home, "/data/pred_grid.rds"))
# for the Mod, the rpw data is instead used to scale the prediction grid
nd_pred_grid_Mod <- pred_grid %>%
  #filter(!year > 2020) %>%
  mutate(depth = ifelse(depth < 0, 0, depth),
         depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
         doy_sc = 0,
         pred_length_sc = 0,
         oxy_sc = (oxy - mean(oxy, na.rm = TRUE))/sd(oxy, na.rm = TRUE),
         sal_sc = (sal - mean(sal, na.rm = TRUE))/sd(sal, na.rm = TRUE),
         temp_sc = (temp - mean(temp, na.rm = TRUE))/sd(temp, na.rm = TRUE),
         depth_sq = depth^2,
         temp_sq = temp^2,
         year_f = as.factor(year)) 
      #  density_cod_sc <- (cpue_cod - mean(cpue_cod))/sd(cpue_cod)

#d_stats <- read_csv(paste0(home, "/data/clean/data_stats.csv"))

#nd_pred_grid_Mod$density_cod <- cpue_cod
#nd_pred_grid_Mod$density_cod_sc <- (cpue_cod - mean(cpue_cod))/sd(cpue_cod)

# predict total rpw model 
pred_avg <- predict(Mod_st, newdata = nd_pred_grid_Mod, return_tmb_object = TRUE)

# weight_sum <- nd_pred_grid_Mod %>% 
#   group_by(year) %>% 
#   summarise(density_cod = sum(density_cod))

# biomass weighted index
# index_avg <- get_index(pred_avg, area = nd_pred_grid_Mod$density_cod) %>%
#   left_join(weight_sum) %>%
#   mutate(est = est / density_cod,
#          lwr = lwr / density_cod,
#          upr = upr / density_cod
#   )

# unweighted index
ncells <- filter(nd_pred_grid_Mod, year == max(nd_pred_grid_Mod$year)) %>% nrow()
index_avg_uw <- get_index(pred_avg, area = 1/ncells, bias_correct = TRUE)

# plot biomass weighted and unweighted index
#bind_rows(index_avg %>% mutate(type = "w"), index_avg_uw %>% mutate(type = "uw")) %>%
index_avg_uw %>%
  #ggplot(aes(year, est^2, ymin = lwr^2, ymax = upr^2, color = type, fill = type)) +
  ggplot(aes(year, est^2, ymin = lwr^2, ymax = upr^2)) +
  geom_ribbon(alpha = 0.2, color = NA) +
  geom_line(size = .5)

# index by sd
s_subdiv_index <- list()

for(i in unique(nd_pred_grid_Mod$sub_div)) {
  
  temp_pred = nd_pred_grid_Mod %>% filter(sub_div == i)
  pred_avg_temp <- predict(Mod, newdata = temp_pred, return_tmb_object = TRUE)#, nsim = 10)

  weight_sum_temp <- temp_pred %>%
  group_by(year) %>% 
  summarise(density_cod = sum(density_cod))

  index_tempo <- get_index(pred_avg_temp, area = temp_pred$density_cod) %>%
  left_join(weight_sum_temp) %>%
  mutate(est = est / density_cod,
         lwr = lwr / density_cod,
         upr = upr / density_cod,
         sub_div = i)

  s_subdiv_index[[i]] = index_tempo
}

subdiv_index <- bind_rows(s_subdiv_index) 

subdiv_index %>% 
  filter(year < 2021) %>% 
  #ggplot(aes(year, est^2, ymin = lwr^2, ymax = upr^2, color = factor(sub_div), fill = factor(sub_div))) +
  #geom_ribbon(alpha = 0.2, color = NA) +
  ggplot(aes(year, est^2, color = factor(sub_div), fill = factor(sub_div))) +
  geom_line(size = 1)

# pred_avg$data %>% summarise(est = mean(exp(est)^2), .by = c(year, sub_div)) %>% 
#   ggplot(aes(year, est^2, color = factor(sub_div))) +
#   geom_ribbon(alpha = 0.2, color = NA) +
#   geom_line(size = 1)


```

```{r cond growth and feeding index}
d <- read_csv(paste0(home, "/data/survey/growth_cond_index.csv")) %>%
  filter(!variable == "condition")
co <- read_csv(paste0(home, "/data/survey/all_condition.csv"))
#sh <- read_csv(paste0(home, "/data/clean/pelagic_biomass_sd24_sd28.csv")) %>%
  rename(variable = species,
          value = biomass,
         year = Year)
d$variable <- d$variable %>%
  recode(#condition = 'condition (Lindmark 2023)'), 
         growth = 'growth (Mion 2020)')

index_st_long <- readRDS(paste0(home, file = paste0("/R/main-analysis/index_st_Mod_ar1_sq2024-05-14.rds"))) %>%
  mutate(variable = "feeding rat. (unwei. long)") %>%
  rename(value = est) %>%
  select(year, value, lwr, upr, variable)
  
# di<- bind_rows(index_avg %>% mutate(variable = "feeding ratio (weigh. env. cov.)"), 
#                index_avg_uw %>% mutate(variable = "feeding ratio (unwei. env. cov)")) %>%
di <- index_avg_uw %>% 
  mutate(variable = "rpw (unweighted)") %>%
  rename(value = est) %>%
  select(year, value, lwr, upr, variable) %>%
  bind_rows(co, d)
  
# di %>%
#   filter(!variable %in% c("Herring")) %>%
#   mutate(value_z = (value - mean(value))/sd(value), .by = variable) %>% 
#   ggplot(aes(year, value_z, group = variable, color = variable)) +
#   geom_line() + 
#   theme_light(base_size = 14)

di %>%
  #filter(variable %in% c("Herring", "Sprat", ))
  mutate(value_z = (value - mean(value))/sd(value), .by = variable) %>% 
  #filter(variable %in% c("feeding ratio (weigh. env. cov.)", "feeding ratio (unwei. env. cov)"))
  ggplot(aes(year, value_z, color = variable)) +
  geom_line() + 
  #geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.3) +
  #facet_wrap(~variable, ncol = 1, scales = "free_y") + 
  theme_light() +
  labs(y = "Normalised value", x="Year")

bind_rows(index_avg %>% mutate(type = "w"), index_avg_uw %>% mutate(type = "uw, short"), index_st_long %>% mutate(type = "uw, long") %>% rename(est = value)) %>%
  ggplot(aes(year, est^2, ymin = lwr^2, ymax = upr^2, color = type, fill = type)) +
  geom_ribbon(alpha = 0.2, color = NA) +
  coord_cartesian(ylim = c(0, 0.04)) +
  geom_line(size = 1) 

```

## plot Max biomass index
```{r}

bi <- read_csv(paste0(home, "/data/clean/div_index_sim.csv")) 
tot<- bi %>% 
  filter(sub_div == "Total") %>%
  ggplot(aes(year, est_t, color = sub_div)) +
  geom_line() + 
  geom_ribbon(aes(ymin = lwr_t, ymax = upr_t), color = NA, alpha = 0.3) +
  #facet_wrap(~variable, ncol = 1, scales = "free_y") + 
  theme_light(base_size = 14) 

sd<- bi %>% 
  filter(!sub_div == "Total") %>%
  ggplot(aes(year, est_t, color = sub_div, fill = sub_div)) +
  geom_line() + 
  geom_ribbon(aes(ymin = lwr_t, ymax = upr_t), color = NA, alpha = 0.3) +
  #facet_wrap(~variable, ncol = 1, scales = "free_y") + 
  theme_light(base_size = 14)

tot + sd + plot_layout(guides = "collect")
```


## Center of gravity

```{r cog spatiotemporal}
cog_st <- #  roughly 1 hour proc time for the st model
  get_cog(
  pred_Mod_st,
  level = 0.95,
  format = "wide",
  area = rep(3, nrow(nd_pred_grid))
)

cog_st <- cog_st %>%
  group_by(decade = round(year/10)*10) %>%
  mutate(mean_x = mean(est_x),
         mean_y = mean(est_y)) %>%
  ungroup() 

ggplot(cog_st, aes(mean_x, mean_y, color = decade )) +
#ggplot(cog_st, aes(est_x, est_y, color = year )) +
  geom_pointrange(aes(xmin = lwr_x, xmax = upr_x)) +
  geom_pointrange(aes(ymin = lwr_y, ymax = upr_y)) +
  scale_colour_viridis_c() +
  labs(title = "center of gravity") +
plot_map_fc +
   geom_pointrange(data = cog_st, aes(est_x*1000, est_y*1000, xmin = lwr_x*1000, xmax = upr_x*1000, colour = decade )) +
   geom_pointrange(data = cog_st, aes(est_x*1000, est_y*1000, ymin = lwr_y*1000, ymax = upr_y*1000, colour = decade )) +
  theme_sleek(base_size = 6) +
  geom_sf()

```

```{r predictions year Mod, eval=FALSE, include=FALSE}
# THE new sdTMB veriosn makes this redundant or if its 
# nd_pred_grid <- pred_grid %>%
#   filter(year > 2020 ) %>%
#   #filter(year %in% c(2015:2018) ) %>%
#   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
#          doy_sc = 0,
#          pred_length_sc = 0)
# 
# ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) %>% nrow()
# 
# time <- proc.time()
# #plan(multisession, workers = 2)
# ind <- nd_pred_grid %>%
#   split(nd_pred_grid$year) %>%
#   map(\(nd) predict(Mod_n, newdata = nd, return_tmb_object = TRUE)) %>%
#   map(\(pr) get_index(pr, area = 1/ncells, bias_correct = TRUE)) %>%
#   list_rbind()
# #plan(sequential)
# proc.time() - time

# # This works, roughly 1 hour per year. But I dont need map really since im just doing one year at a time.
# time <- proc.time()
# ps = data.frame()
# for (i in 1990:2022) {
# 
#   nd_pred_grid <- pred_grid %>%
#   filter( year %in% i ) %>%
#   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
#          doy_sc = 0,
#          pred_length_sc = 0)
# 
#   prdi <- nd_pred_grid %>%
#       split(nd_pred_grid$year) %>%
#       map(\(nd) predict(Mod, newdata = nd, return_tmb_object = TRUE))
# 
#   irdi <- prdi %>%
#       map(\(x) get_index(x, area = 1/ncells, bias_correct = TRUE)) %>%
#     #future_map(\(pr) get_index(pr, area = 1/ncells, bias_correct = TRUE)) %>%
#       list_rbind()#lmap(get_index, area = 1/ncells, bias_correct = TRUE)
# # for two consequitive years, the predictions take 180 sec and the index 5500 sec.
# 
# ps <- bind_rows(ps,irdi) # ad
# 
# # for (i in 1:n) {
# #     # ... make some data
# #     dat <- data.frame(x = rnorm(10), y = runif(10))
# #     dat$i <- i  # maybe you want to keep track of which iteration produced it?
# #     datalist[[i]] <- dat # ad
#   gc()
# }
# 
# proc.time() - time
# 
# 
# time <- proc.time()
# ps = data.frame()
# for (i in 1963:2022) {
# 
#   nd_pred_grid <- pred_grid %>%
#   filter( year %in% i ) %>%
#   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
#          doy_sc = 0,
#          pred_length_sc = 0)
# 
#   prdi <- predict(Mod_n, newdata = nd_pred_grid, return_tmb_object = TRUE)
#   irdi <- get_index(prdi, area = 1/ncells, bias_correct = TRUE)
#   ps <- bind_rows(ps,irdi) 
#   gc()
# }
# 
# proc.time() - time
# 
# # # model n
# # time <- Sys.time()
# # index_n <- map_dfr(unique(nd_pred_grid$year), \(y) { # backslash means function
# #   nd <- nd_pred_grid %>% filter( year == y )
# #   p <- predict(Mod_n, newdata = nd, return_tmb_object = TRUE)
# #   get_index(p, area = 1/ncells, bias_correct = TRUE)
# # })
# # Sys.time() - time
# # 
# # time <- Sys.time()
# # plan(multisession, workers = 4)
# # index_n <- future_map_dfr(unique(nd_pred_grid$year), \(y) { # backslash means function
# #   nd <- nd_pred_grid %>% filter( year == y )
# #   p <- predict(Mod_n, newdata = nd, return_tmb_object = TRUE)
# #   get_index(p, area = 1/ncells, bias_correct = TRUE)
# # })
# # plan(sequential)
# # Sys.time() - time
# # # 
# # 
# # ncells <- filter(nd_pred_grid, year == max(nd_pred_grid$year)) %>% nrow()
# # 
# # 
# # pred_Mod <- predict(Mod_n, newdata = nd_pred_grid, return_tmb_object = TRUE) # TRUE returns a report from TMB in the 
# # index <- get_index(Pred_Mod, area = rep(1/ncells, nrow(Pred_Mod$data)), bias_correct = TRUE)
# # 
# ps %>%
#   ggplot(aes(year, est, fill = model)) +
#   geom_line() +
#   geom_point(shape = 21, alpha = 0.7) +
#   geom_ribbon(aes(ymin = lwr, ymax = upr), color = NA, alpha = 0.4)
```


Size class dependent predictions based on *spatial model*.

```{r predictions pred length Mod_s}
nd_sm_pred_grid <- pred_grid %>%
   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
          doy_sc = 0, sal_sc = 0, oxy_sc = 0, temp_sc = 0,
         pred_length_sc = (20 - mean(df$pred_length))/sd(df$pred_length))
nd_me_pred_grid <- pred_grid %>%
   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
          doy_sc = 0, sal_sc = 0, oxy_sc = 0, temp_sc = 0,
         pred_length_sc = (35 - mean(df$pred_length))/sd(df$pred_length))
nd_la_pred_grid <- pred_grid %>%
   mutate(depth_sc = (depth - mean(df_tot$depth))/sd(df_tot$depth),
          doy_sc = 0, sal_sc = 0, oxy_sc = 0, temp_sc = 0,
          pred_length_sc = (50 - mean(df$pred_length))/sd(df$pred_length))

 pred_Mod_me <- predict(Mod_st, newdata = nd_me_pred_grid, return_tmb_object = TRUE)
 pred_Mod_sm <- predict(Mod_st, newdata = nd_sm_pred_grid, return_tmb_object = TRUE)
 pred_Mod_la <- predict(Mod_st, newdata = nd_la_pred_grid, return_tmb_object = TRUE)

 # Make temporal index!
 ncells <- filter(nd_me_pred_grid, year == max(nd_me_pred_grid$year)) %>% nrow()
 #??sdmTMB:predict

 index_tot_sm <- get_index(pred_Mod_sm, area = rep(1/ncells, nrow(pred_Mod_sm$data)), bias_correct = TRUE)
 index_tot_la <- get_index(pred_Mod_la, area = rep(1/ncells, nrow(pred_Mod_la$data)), bias_correct = TRUE)
 index_tot_me <- get_index(pred_Mod_me, area = rep(1/ncells, nrow(pred_Mod_me$data)), bias_correct = TRUE)

 bind_rows(index_tot_sm %>% mutate(length = "<20"),
           index_tot_me %>% mutate(length = "20-50"),
           index_tot_la %>% mutate(length = ">50"))  %>%
   ggplot(aes(year, est, color = length)) +
   geom_line() +
   #geom_ribbon(aes(ymin = lwr, ymax = upr, alpha = 0.3)) +
   #scale_fill_manual(values = c("white", "grey10")) +
   scale_x_continuous(breaks = seq(min(index_tot_sm$year), max(index_tot_sm$year), by = 10)) +
   ggtitle("predicted est")
   #facet_wrap(~method, scales = "fixed") +
   geom_errorbar(aes(ymin = lwr, ymax = upr), alpha = 0.4, width = 0)

```


## Effect in maps

```{r maps based on spatiotemporal AR1 model (Mod)}
pred_Mod_st$data <- pred_Mod_st$data %>%
  group_by(decade = round(year/10)*10, X, Y) %>%
  mutate(dec_mean_est = mean(est)) %>% # estimate
  mutate(dec_mean_enrf = mean(est_non_rf)) %>% # non random (fixed) effects 
  mutate(dec_mean_erf = mean(est_rf)) %>% # random spatial
  mutate(dec_mean_eps = mean(epsilon_st)) %>% #random spatial and spatiotemporal
  ungroup()

pred_Mod_st$data %>%
  pivot_longer(cols = c("est","est_non_rf","est_rf"), names_to = "type", values_to = "vest") %>%
  ggplot(aes(exp(vest)^2)) +
  facet_wrap(~type, ncol = 2, scales = "free") +
  geom_histogram(bins = 100)

# estimate
plot_map_fc +
  geom_raster(data = pred_Mod_st$data, aes(X*1000, Y*1000, fill = exp(dec_mean_est)^2)) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis(trans = "sqrt") +
  ggtitle("Estimate, decadal mean estimate")

# Fixed eff, i.e. rpw_tot ~ 0 + s(doy_sc, bs = "cc") + depth_sc, time_varying = ~ 1 + pred_length_sc,
plot_map_fc +
  geom_raster(data = pred_Mod_st$data, aes(X*1000, Y*1000, fill = exp(dec_mean_enrf)^2)) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis(trans = "sqrt") +
  ggtitle("Non random fields, decadal mean estimate")

pred_Mod_st$data %>%
  pivot_longer(cols = c("omega_s", "epsilon_st"), names_to = "type", values_to = "vest") %>%
  ggplot(aes(exp(vest)^2)) +
  facet_wrap(~type, ncol = 2, scales = "free") +
  geom_histogram(bins = 100)

# spatial and spatiotemporal fields
plot_map_fc +
  # geom_raster(data = pred_Mod_st$data, aes(X*1000, Y*1000, fill = est_rf)) +
  # facet_wrap(~year) +
  geom_raster(data = pred_Mod_st$data, aes(X*1000, Y*1000, fill = exp(dec_mean_erf)^2)) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() +
  ggtitle("all random fields, decadal mean estimate")

# spatiotemporal fields
plot_map_fc +
  geom_raster(data = pred_Mod_st$data, aes(X*1000, Y*1000, fill = exp(dec_mean_eps)^2)) +
  facet_wrap(~decade) +
  theme_sleek(base_size = 6) +
  geom_sf() +
  scale_fill_viridis() +
  ggtitle("spatiotemporal random intercept, decadal mean estimate")

```

