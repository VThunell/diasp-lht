---
title: "Sex ratio model v1" 
author: "Viktor Thunell" 
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: false
  eval: true
  cache: true
---

## Load libraries
```{r libs}
#| message: false
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools","viridis","nls.multstart", "broom", "patchwork", "rjags", "coda", "boot", "tidybayes","bayesplot")

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){
    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  }

invisible(lapply(pkgs, library, character.only = T))

options(ggplot2.continuous.colour = "viridis")
theme_set(theme_light()) # check why global theme option not working when rendering
# Set path

home <- here::here()
```

## Read data
```{r}
#| message: false
#| warning: false
#| cache: false

sallaa <- readRDS(file = paste0(home,"/data/data-for-4-1/salmon-laa_2025-03-07.RData"))

```

## Model sex ratio

What is the sex ratio, measured as proportion of females, in Swedish salmon and how does it vary within rivers and with salmon origin?

```{r}
# Calculated ratio from data:
sallaa %>%
  drop_na(sex) %>%
  count(sex) %>%
  mutate(Y = prop.table(n)) %>%
  filter(sex == "f") %>%
  pull(Y)

```

I will start with a simple null model and build on this by adding predictors and then make it hierarchical.

Using the binomial as likelihood and beta as prior (beta binomial), the posterior is beta (the beta is the conjugate prior for binomial, https://en.wikipedia.org/wiki/Conjugate_prior). In this case the likelihood is the success of being female out all individuals (number of trials). The posterior is the probability density of proportion female in the population. 

Model description for Alternative 1 with beta prior with shape paramters a and b. This model without teh index $i$ is the null model. 

$$Y_i~ \sim Binomial(n_i, p_i)$$
$$p_i ~  \sim Beta(a,b)$$


By instead building this as a linear model with predictors (origin or age separately below) I use priors with normal distributions on the parameters (alpha and beta)

$$logit(\mu_i) = \alpha + \beta x_i$$

## Model 1 - beta binomial without predictors and not hierarchial
Using the binomial as likelihood and beta as prior (beta-binomial distribution?), the posterior is beta. In this case the likelihood is the success of being female out all individuals (number of trials) given probability p.

```{r}
# data 
sal_ind1 <- sallaa %>%
  drop_na(sex)

# params for dbin
n_fem <- sal_ind1 %>% filter(sex == "f") %>% summarise(n=n()) %>% pull(n) # number success
n <- sal_ind1 %>% summarise(n=n()) %>% pull(n) # number of trials

# Spec model (BUGS-language description)
propfem_model_2 <- "model{
    # Likelihood model for X number of fems
    X ~ dbin(p, n)
    
    # Prior model for p
    p ~ dbeta(a, b)
}"

# Build the model    
propfem_jags <- jags.model(textConnection(propfem_model_2), 
    data = list(a = 1, b = 1, X = n_fem, n = n),
    n.chains = 2,
    inits = list(p=0.5)
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=1
is(propfem_jags)
samples = coda.samples(propfem_jags, 
                       variable.names = c("p","X"),
                       n.iter = iters,
                       thin = n.thin)

# summarise and look at the mcmc trace
summary(samples) # X is the number of female individuals in the data (n_fem)
mcmc_trace(samples, pars = "p") +
  theme_light()
mcmc_intervals(samples, pars = c("p"))

#compare the posterior with corresponding plot of the binomial based on random samples and the n_fem and number of males as shape parameters
tidy_draws(samples) %>% filter(.chain == 1) %>%
  mutate(median = median(p)) %>%
  ggplot() + 
  geom_density(aes(x = p), color = "red") +
  geom_density(data=data.frame(p = rbeta(n = nrow(sal_ind1), shape1 = 1, shape2 = 1)), aes(x = p)) +
  geom_text(aes(x = median-0.1, y = 800, label = paste0("median:", round(median, 4)))) +
  theme_light()




```

## Model 4 - Spatial dependent beta binomial
So we know that within rivers sex ratios differs between groups of fish of different age. In the previous model, we are calculating the sex ratio of each age group and the uncertainty around these estimates are based on the uncertainty on the intercept and slope parameters. By modelling this hierarchically, I make use of the information of population female proportion when estimating the fem prop of each age group. Using the beta binomial as in the first model but with probability of success varying independently between age groups (maybe a bit unreasonable assumption). Then the beta distribution is the prior for binomial probability and I put hyper priors on the beta shape parameters a and b.

```{r}

# filter and summarise data between ages instead of rivers. 
sal_ind4 <- sallaa %>%
  drop_na(sex) %>%
  summarise(obs = n(), .by = c(sex, spat.agg)) %>%
  mutate(obs_tot = sum(obs), .by = c(spat.agg)) %>%
  filter(sex == "f")

# proportion returning females between groups
sal_ind4 %>%
  ggplot(aes(as.factor(spat.agg), obs/obs_tot)) +
  geom_boxplot()

# Spec model
propfem_model_4 <- "model{
  # Likelihood model
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    }
  
  # Prior for p
  
  for (i in 1:nobs){
  
   p[i] ~ dbeta(a, b)
   
  }
    
  # hyperpriors with sample mean expectation (mu = a/(a+b)) and sample size (eta) (https://bayesball.github.io/BOOK/bayesian-hierarchical-modeling.html#hierarchical-beta-binomial-modeling)
  
  a <- mu*eta
  b <- (1-mu)*eta
  mu ~ dbeta(mua, mub)
  eta <- exp(logeta) # transformed logeta for logistic distribution
  logeta ~ dlogis(logn, 1)
  
}"

n_tot <- sal_ind4 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials
#n_femtot <- sal_ind4 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
#n_maltot <- n_tot - n_femtot # number fails

data = c(sal_ind4 %>% select(obs, obs_tot, spat.agg) %>% as.list(), 
         list(mub = 1, mua = 1 , logn = log(100), nobs = nrow(sal_ind4)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_4), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = "p",
                       #variable.names = c("b1","alpha","est_a2","est_a3"),
                       n.iter = iters,
                       thin = n.thin)
summary(samples)
mcmc_trace(samples)

gelman.diag(samples) # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesnt work when predictions are in the samples...

mcmc_intervals(samples)

# age_ad seems to be equal to ag_ad2 so I can just rename the group levels 
#sal_ind4 %>% mutate(age_ad2 = as.numeric(as.factor(age_ad))) %>% select(age_ad, age_ad2) %>% distinct()

plot <- gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
  left_join(sal_ind4 %>% select(spat.agg) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() + 
  geom_density(aes(x = .value, color = spat.agg))# + # age parameter i

txt.points <- ggplot_build(plot)$data[[1]] %>%
  group_by(group) %>%
  slice_max(y) %>%
  rename(i = group) %>%
  left_join(sal_ind4 %>% select(spat.agg) %>% mutate(i = row_number()), join_by(i))

plot + geom_text(data = txt.points, aes(x, y,label = spat.agg), size = 3)  +
  ylab("denisty") 


  
```
This is nice, prop females increaes with age for the fisrt 3 years and the levels out but data is scarce for 4-6. The posterior for age 1-3 looks similar to the predictions from the regresssion model (model 3) but not for age 4-6. This is of course sonce we are in model 3 modelling a linear relationship between age and proprtion females and we dotn have that much data for 4-6 (?). The relationship between age and prop- femles seems to be quadratic or at least level off at age > 3.

## Model 5 - Spatial and age dependent hierarchial beta binomial

```{r}
# filter and summarise data between ages instead of rivers. 
sal_ind5 <- sallaa %>%
  drop_na(sex, age.sea) %>%
  summarise(obs = n(), .by = c(sex, spat.agg, age.sea)) %>%
  mutate(obs_tot = sum(obs), .by = c(spat.agg, age.sea)) %>%
  filter(sex == "f") %>%
  mutate(spat.agg = as.factor(spat.agg),
         age.sea = as.factor(age.sea)) %>%
  select(-sex)

# proportion returning females between groups
sal_ind5 %>%
  ggplot(aes(as.factor(age.sea), obs/obs_tot)) +
  geom_boxplot() +
sal_ind5 %>%
  ggplot(aes(as.factor(spat.agg), obs/obs_tot)) +
  geom_boxplot()

# Spec model
propfem_model_5 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    #p[i] <- alpha[ spat.agg[i] ] + b1*age_ad[i] #SKIPPING link for now as I cant work out the prior transformation when tructating alpha and also posterior gets lower limit inv.logit(0.0001) (ask BECKY!)
    
    }
  
   # Prior for p
  
  for (i in 1:nobs){
  
   p[i] ~ dbeta(a, b)
   
  } 
  
  # hyperpriors using with sample mean expectation (mu = a/(a+b)) and sample size (eta) (https://bayesball.github.io/BOOK/bayesian-hierarchical-modeling.html#hierarchical-beta-binomial-modeling)
  
  a <- mu*eta
  b <- (1-mu)*eta
  mu ~ dbeta(mua, mub)
  eta <- exp(logeta) # transformed logeta for logistic distribution
  logeta ~ dlogis(logn, 1)
  
}"

# Spec model
data = c(sal_ind5 %>% select(obs, obs_tot) %>% as.list(), 
         list(mub = 1, mua = 1 , logn = log(100), nobs = nrow(sal_ind5)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_5), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = "p",
                       #variable.names = c("b1","alpha","est_a2","est_a3"),
                       n.iter = iters,
                       thin = n.thin)
summary(samples)
mcmc_trace(samples)

gelman.diag(samples) # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesnt work when predictions are in the samples...

mcmc_intervals(samples)

# age_ad seems to be equal to ag_ad2 so I can just rename the group levels 
#sal_ind5 %>% mutate(age_ad2 = as.numeric(as.factor(age_ad))) %>% select(age_ad, age_ad2) %>% distinct()

#plot <- 
gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
  left_join(sal_ind5 %>% select(spat.agg, age.sea) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() + 
  geom_density(aes(x = .value, color = factor(age.sea))) +
  facet_wrap(~spat.agg, scales = "free_y") +
  theme_minimal() +
  
gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
  left_join(sal_ind5 %>% select(spat.agg, age.sea) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() + 
  geom_density(aes(x = .value, color = factor(spat.agg))) +
  facet_wrap(~age.sea, scales = "free_y") +
  theme_minimal()
#plot
# txt.points <- ggplot_build(plot)$data[[1]] %>%
#   group_by(group, PANEL) %>%
#   slice_max(y) %>%
#   rename(i = group) %>%
#   left_join(sal_ind4 %>% select(spat.agg) %>% mutate(i = row_number()), join_by(i))
# 
# plot + geom_text(data = txt.points, aes(x, y, label = spat.agg), size = 3)  +
#   ylab("denisty") 

# gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
#   left_join(sal_ind5 %>% select(spat.agg, age.sea) %>% mutate(i = row_number()), join_by(i)) %>%
#   ggplot(aes(y = .value, x = age.sea, colour = spat.agg), alpha = 0.5) +
#   stat_halfeye()
  
# samples %>%
#  #recover_types(sal_ind5) %>% # I dont trust this function
#  gather_draws(p[i]) %>%
#  median_qi()

gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
  median_qi() %>%
  left_join(sal_ind5 %>% select(spat.agg, age.sea) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() +
  geom_point(data = gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
               median_qi() %>% left_join(sal_ind5 %>% select(spat.agg, age.sea) %>% mutate(i = row_number()), join_by(i)),
               aes(y = .value, x = age.sea, colour = spat.agg))

```
Does this variation depend on age or something else thats is due to river identity?


## Model 6 - River dependent hierarchial beta binomial with an age predictor

Model 6 formulation. Index $i$ is the observations (n=rivers_j*age_ij), j is the grouping (river) and age i  within each river.

$$Y_i~ \sim Binomial(n_i, p_i)$$

$$logit(p_i) ~ \sim \alpha_j + \beta_1*Age$$

$$ \alpha_j ~  \sim Beta(a,b)$$

```{r}

# filter and summarise data between ages instead of rivers. 
sal_ind6 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         age_ad > 0,
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(obs = n(), .by = c(sex, river, age_ad)) %>%
  mutate(obs_tot = sum(obs), .by = c(age_ad, river)) %>%
  filter(sex == "f") %>%
  mutate(river2 = as.numeric(as.factor(river))) 

# proportion returning females in age groups 
sal_ind6 %>%
  ggplot(aes(as.factor(age_ad), obs/obs_tot)) +
  geom_boxplot() +
  geom_point()
#+ b1*age_ad[i]^2
# Spec model
propfem_model_6 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
    
    p[i] <- alpha[ river2[i] ] + b1*age_ad[i] #SKIPPING link for now as I cant work out the prior transformation when tructating alpha and also posterior gets lower limit inv.logit(0.0001) (ask BECKY!)
    
    }
  
  # Prior for p
  
  for (j in 1:ngroups){
  
   alpha[j] ~ dbeta(a, b) T(0.001,0.999)
   
  }
    
  # hyperpriors using with sample mean expectation (mu = a/(a+b)) and sample size (eta) (https://bayesball.github.io/BOOK/bayesian-hierarchical-modeling.html#hierarchical-beta-binomial-modeling)
  
  a <- mu*eta 
  b <- (1-mu)*eta
  mu ~ dbeta(mua, mub)
  eta <- exp(logeta) # transformed logeta for logistic distribution
  logeta ~ dlogis(logn, 1)
  b1 ~ dnorm(0,0.0001)
  b2 ~ dnorm(0,0.0001)
  
}"


# Error "Slicer stuck at value with infinite density"
# https://stackoverflow.com/questions/47135726/error-slicer-stuck-at-value-with-infinite-density-running-binomial-beta-model
# p[i] ~ dbeta( ( mu[i] * theta[i]) , ((1-mu[i])*theta[i])) T(0.001,0.999)
# with T(L,U) "X is known to lie between L and U" (Rjags mannual)
# but how to do this on link scale?

n_tot <- sal_ind6 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials
#n_femtot <- sal_ind6 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
#n_maltot <- n_tot - n_femtot # number fails

data = c(sal_ind6 %>% select(obs, obs_tot, age_ad, river2) %>% as.list(), 
         list(mub = 1, mua = 1 , logn = log(100), n_tot = n_tot, ngroups = length(unique(sal_ind6$river)), nobs = nrow(sal_ind6)))


# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_6), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=100

samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha","p"),
                       n.iter = iters,
                       thin = n.thin)

summary(samples)
mcmc_trace(samples)

#gelman.diag(samples) # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesnt work when predictions are in the samples...

mcmc_intervals(samples)

ggplot() +
  geom_point(data = sal_ind6, aes(x = obs_tot,y = obs)) + 
  geom_abline(data = summarise_draws(samples) %>%  filter(str_detect(variable, 'alpha'), ), aes(intercept = mean, slope = summarise_draws(samples) %>% filter(variable == "b1") %>% pull(mean), color = variable))

gather_draws(samples, p[i] ) %>% filter(.chain == 1) %>%
  #mutate(value = exp(.value)/(1+exp(.value))) %>%
  left_join(sal_ind6 %>% select(river, age_ad) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() + 
  geom_density(aes(x = .value, color = as.factor(age_ad))) + # age parameter estimate natural scale 
  facet_wrap(~river)
  theme_light() #+

gather_draws(samples, p[i], alpha[i]) %>% filter(.chain == 1) %>%
  mutate(value = exp(.value)/(1+exp(.value))) %>%
#median_qi()
  ggplot() + 
  geom_density(aes(x = value, color = factor(i))) + # age parameter i
  facet_wrap(~alpha)
  theme_light() 

```

I need to truncate the beta prior!! However, when that is fixed, we know from model 4 that the relationship prop females and age is not linear but more quadratic. Lets try addd a polynomial effect.

## Model 7 - Quadratic age predictor and river dependent hierarchial beta binomial with an 

```{r}

# filter and summarise data between ages instead of rivers. 
sal_ind7 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         age_ad > 0,
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(obs = n(), .by = c(sex, river, age_ad)) %>%
  mutate(obs_tot = sum(obs), .by = c(age_ad, river)) %>%
  filter(sex == "f") %>%
  mutate(river2 = as.numeric(as.factor(river))) 

# proportion returning females in age groups 
sal_ind6 %>%
  ggplot(aes(as.factor(age_ad), obs/obs_tot)) +
  geom_boxplot() +
  geom_point()
#+ b1*age_ad[i]^2
# Spec model
propfem_model_7 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
    
    p[i] <- alpha[ river2[i] ] + b1*age_ad[i] + b2*age_ad[i]^2 #SKIPPING link for now as I cant work out the prior transformation when tructating alpha and also posterior gets lower limit inv.logit(0.0001) (ask BECKY!)
    
    }
  
  # Prior for p
  
  for (j in 1:ngroups){
  
   alpha[j] ~ dbeta(a, b) T(0.001,0.999)
   
  }
    
  # hyperpriors using with sample mean expectation (mu = a/(a+b)) and sample size (eta) (https://bayesball.github.io/BOOK/bayesian-hierarchical-modeling.html#hierarchical-beta-binomial-modeling)
  
  a <- mu*eta 
  b <- (1-mu)*eta
  mu ~ dbeta(mua, mub)
  eta <- exp(logeta) # transformed logeta for logistic distribution
  logeta ~ dlogis(logn, 1)
  b1 ~ dnorm(0,0.0001)
  b2 ~ dnorm(0,0.0001)
  
}"


# Error "Slicer stuck at value with infinite density"
# https://stackoverflow.com/questions/47135726/error-slicer-stuck-at-value-with-infinite-density-running-binomial-beta-model
# p[i] ~ dbeta( ( mu[i] * theta[i]) , ((1-mu[i])*theta[i])) T(0.001,0.999)
# with T(L,U) "X is known to lie between L and U" (Rjags mannual)
# but how to do this on link scale?

n_tot <- sal_ind7 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials
#n_femtot <- sal_ind6 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
#n_maltot <- n_tot - n_femtot # number fails

data = c(sal_ind7 %>% select(obs, obs_tot, age_ad, river2) %>% as.list(), 
         list(mub = 1, mua = 1 , logn = log(100), n_tot = n_tot, ngroups = length(unique(sal_ind6$river)), nobs = nrow(sal_ind6)))


# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_7), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=100

samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha","p"),
                       n.iter = iters,
                       thin = n.thin)


summary(samples)
mcmc_trace(samples)

gelman.diag(samples) # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesnt work when predictions are in the samples...

mcmc_intervals(samples)

ggplot() +
  geom_point(data = sal_ind7, aes(x = obs_tot,y = obs)) + 
  geom_abline(data = summarise_draws(samples) %>%  filter(str_detect(variable, 'alpha'), ), aes(intercept = mean, slope = summarise_draws(samples) %>% filter(variable == "b1") %>% pull(mean), color = variable))

gather_draws(samples, p[i] ) %>% filter(.chain == 1) %>%
  #mutate(value = exp(.value)/(1+exp(.value))) %>%
  left_join(sal_ind7 %>% select(river, age_ad) %>% mutate(i = row_number()), join_by(i)) %>%
  ggplot() + 
  geom_density(aes(x = .value, color = as.factor(age_ad))) + # age parameter estimate natural scale 
  facet_wrap(~river)
  theme_light() #+

gather_draws(samples, p[i], alpha[i]) %>% filter(.chain == 1) %>%
  mutate(value = exp(.value)/(1+exp(.value))) %>%
#median_qi()
  ggplot() + 
  geom_density(aes(x = value, color = factor(i))) + # age parameter i
  facet_wrap(~alpha)
  theme_light() 

```
