---
title: "Salmon data for DIASPARA WP 4.1"
author: "Viktor Thunell"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 80%
editor: source
execute: 
  echo: true
  eval: true
  cache: true
---

## Load libraries

```{r libs}
#| message: true
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools","viridis","nls.multstart", "broom", "patchwork", "sdmTMB") 

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){
  
    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  
  }

invisible(lapply(pkgs, library, character.only = T))

options(ggplot2.continuous.colour = "viridis")
theme_set(theme_grey()) # check why global theme option not working when rendering
devtools::source_url("https://raw.githubusercontent.com/VThunell/diasp-lht/main/R/functions/map-plot.R")

# Set path
home <- here::here()
```

## Read Length at data

Four data sets build the length at age data:

1. Sweden SLU database "Sötebasen" containing 
    + At locations across Sweden on both the Baltic side and in the Western sea 
    + Coordinate (WGS84 decimal degress) of river or sometimes region (Baltic or West coast). This is not the exact catch place.
2. Finland back calculated growth data 
    + Rod, trap and netting methods.  
    + From river Tornionjoki.
3. Finland catch data 
    + Awaiting data from Atso Romakkaniemi.  
4. France catch data
    + Recreational and commercial fishing (and trapping which I dont know if its scientific or not)
    + At locations across France  

The data is read below and the names of the variables of interest (age, length, sex, year, river, origin) are standardized.

```{r}
#| warning: true
#| cache: false
#| output: false

# Sweden SLU database "Sötebasen"
swe_sallaa <- read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/LaxindividerSötebasen.csv", delim = ";", locale = locale(encoding="latin1"), col_types = cols(Märkning2 = col_character(), Märke2Nr = col_character(), ÅlderLek3 = col_character())) %>%
  rename(age_ad = AdultÅlder,
         age_sm = SmoltÅlder,
         length = Längd,
         weight = Vikt,
         year = Årtal,
         origin = Ursprung,
         sex = Kön,
         river = VattenNamn,
         stage = Stadium
         ) %>%
  mutate(country = "SWE",
         origin = case_when(origin == "Odlad" ~ "reared",
                            origin == "Vild" ~ "wild",
                            .default = origin))
# Columns that need to be fixed if used: Märkning2, Märke2Nr, ÅlderLek3

# Finnish back calculated growth
fin_sallaa <- read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Tornionjoki_growth measurements_1970s-.txt", delim = "\t", locale = locale(encoding="latin1", decimal_mark = ",")) %>%
  rename(age_ad = 'SEA-AGE',
         age_sm = 'SMOLT AGE',
         length = LENGTH,
         weight = WEIGHT,
         year = YEAR,
         ) %>%
  mutate(sex = if_else(SEX == 2, "f", "m", missing = NA), # assuming 2 is female (larger mean length)
         country = "FIN",
         origin = NA,
         river = "Tornionjoki")

# France length at age
fra_sallaa <- read_csv2(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/SAT_TailleAge_France.csv", locale = locale(encoding="latin1")) %>%
  rename(age_ad = sea_age,
         age_sm = smolt_age,
         ) %>%
  mutate(date = dmy_hm(cam_date_heure_fin, truncated = 2),
         year = year(date),
         river = str_to_title(sita_nom),
         origin = NA,
         country = "FRA",
         stock_unit = "France") # WGNAS stock unit
  
str(swe_sallaa)
str(fin_sallaa)
str(fra_sallaa)
```

## Read Fecundity at length data

Six data sets build the fecundity length data
* Sweden 1 - Baltic
    + Collected in rearing stations in river Umeälven and Dalälven
    + All eggs are counted - first the fish is stripped and then the gonad is opened and remaining eggs counted
    + Total fecundity used (stripped + dissected). I.e.  All eggs are counted!
    + Also trout data that is filtered out.
* Sweden 2 - Western sea
    + Collected in rearing station in river Göta älv 
    + All fin-clipped individuals. 
    + Only stripped (from what I know, methods description lacking atm)
    + Not total fecundity as in Sweden 1
* Finland 1
   + Total fecundity used (stripped + dissected). I.e.  All eggs are counted!
    + From river Tornionjoki
    + Both reared (finclipped) and wild individuals (adipose fin intact)
* Finland 2
    + From river Tornionjoki and Simojoki
    + Total fecundity used (stripped + dissected). I.e.  All eggs are counted!
    + wild, reared and NA mix of individuals
* France fecundity data
    + 

```{r}
#| warning: true
#| cache: false
#| output: false

# Fecundity Sweden Baltic
swe_salfec <- read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Fekunditetsdata_Dal_Ume_20241213.csv") %>%
  filter(Species == "Salmon") %>%
  rename(n_eggs = 'No eggs total',
         length = 'Length (cm)',
         weight = 'Weight before stripping (kg)',
         origin = 'Wild/Reared',
         river = River,
         ) %>%
  mutate(origin = tolower(origin),
         country = "SWE",
         year = as.numeric(Year), 
         weight = weight*1000, # to grams 
         n_eggs = as.numeric(str_remove_all(n_eggs, " ")),
         length = if_else(is.na(length), NA, length*10)) # to mm 
        
# Fecundity Sweden Göta älv 2024
swe_salfec2 <- read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/fecundity_Gotaalv_2024.csv") %>%
  rename(n_eggs = 'ROM SKATTA ANTAL (ST)',
         length = 'Längd (cm)',
         weight = 'Vikt (kg)',
         ) %>%
  mutate(origin = if_else(fettfena == "ej","reared","wild"),
         river = "Göta älv",
         country = "SWE",
         year = 2024, 
         weight = weight*1000, # to grams 
         length = length*10) # to mm

# Fecundity Finland 1996-1998
fin_salfec1 <- read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Tornionjoki_1996-1998_fecundity.csv") %>%
  rename(n_eggs = 'TOTAL FECUNDITY (EXCL. UNCERTAIN OOZYTES)',
         length = LENGTH,
         age_sea = 'SEA-AGE',
         age_riv = 'SMOLT AGE',
         weight = WEIGTH,
         year = YEAR
        ) %>%
  mutate(country = "FIN",
         origin = case_when('ADIPOSE FIN (1=CUT, 2=INTACT)' == "2" ~ "reared",
                            'ADIPOSE FIN (1=CUT, 2=INTACT)' == "1" ~ "wild",
                            'ADIPOSE FIN (1=CUT, 2=INTACT)' == "0" ~ "uncertain",
                            .default = 'ADIPOSE FIN (1=CUT, 2=INTACT)'),
         river = "Tornionjoki")

# Fecundity Finland 2006
fin_salfec2 <- read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Tornionjoki_fecundity_2006.csv") %>%
  rename(age_sea = 'SEA-AGE',
         origin='ORIGIN (1=WILD 2=REARED)') %>%
  mutate(river = "Tornionjoki",
         origin = case_when(origin == "2" ~ "reared",
                            origin == "1" ~ "wild",
                            .default = NA)) %>%
  bind_rows( read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Simojoki_fecundity_2006.csv") %>%
               mutate(river = "Simojoki",
                      age_sea = NA,
                      origin = NA) ) %>%
  rename(length = 'LENGTH (mm)',
         n_eggs = 'number eggs') %>%
  mutate(year = 2006,
         country = "FIN") 

# Fecundity France
fra_salfec <- read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/Fecondite_SAT_Bilan.csv") %>%
  rename(n_eggs = Fecondite,
         length_f = Lf,
         length_t = Lt,
         weight = Poids,
         year = Annee,
         age_sea = Age_mer,
         age_riv = Age_riviere,
         river = Origine,
         ) %>%
  mutate(country = "FRA",
         origin = NA)

str(swe_salfec)
str(swe_salfec2)
str(fin_salfec1)
str(fin_salfec2)
str(fra_salfec)

# fra_sallaa %>%
#   filter(!is.na(`Genetic sex`)) %>%
#   distinct(sita_nom)

```

## Spatial aggregations - Baltic Assessment and Atlantic Stock units and French rivers

```{r}

# Assessment units of the index rivers in Sweden and Finland. 
AU_rivers = bind_cols(river = c("Tornionjoki","Simojoki","Kalixälven","Råneälven","Piteälven","Åbyälven","Byskeälven","Rickleån","Sävarån","Vindelälven","Öreälven","Lögdeälven","Ljungan","Mörrumsån","Emån", "Kågeälven","Testeboån", "Umeälven", "Dalälven", "Luleälven","Muonionjoki"),
                      asses_unit = c(1,1,1,1,2,2,2,2,2,2,2,2,3,4,4,2,3,2,3,2,1), 
                      stock_origin = "wild") %>%
  bind_rows(bind_cols(river = c("Torneälven_hatchery","Luleälven_(RG_with_Pite)","Iijoki","Oulujoki","Skellefteälven","Umeälven_(RG_with_Vindel)","Ångermanälven","Indalsälven_(RG_with_Ljungan)","Ljusnan","Dalälven_(RG_with_Testeboån)", "Torneälven"), 
                      asses_unit = c(1,2,1,1,2,2,3,3,3,3,1), 
                      stock_origin = "reared")) 

# And the Swedish rivers entering the the Western sea, i.e. WGNAS stock unit "Sweden".
SU_rivers = bind_cols(river = c("Ätran","Örekilsälven","Göta älv","Lagan","Västerhavet (hela) ICES SD 20-21","Genevadsån","Fylleån","Stensån"),
                      stock_unit = "Sweden", 
                      stock_origin = NA)

# Add AU and SU to lat lons from Swedish sötebasen
swefin_rivers <- swe_sallaa %>%
  drop_na(length, age_ad) %>%
  distinct(river, WGS84_N_Vatten, WGS84_E_Vatten) %>%
  rename(lat = WGS84_N_Vatten,
         lon = WGS84_E_Vatten) %>%
  mutate(lat = case_when(river == "Östersjön (hela) ICES SD 22-32" ~ 58.475309,
                         .default = lat),
         lon = case_when(river == "Östersjön (hela) ICES SD 22-32" ~ 19.780140,
                         .default = lon)) %>%
  bind_rows(data.frame(river = c("Tornionjoki", "Muonionjoki")) %>%
              mutate(lat = case_when(river %in% c("Tornionjoki", "Muonionjoki") ~ 65.879905,
                                     river == "Simojoki" ~ 65.625639,
                                     river == "Östersjön (hela) ICES SD 22-32" ~ 58.475309,
                                     .default = NA),
                     lon = case_when(river %in% c("Tornionjoki", "Muonionjoki") ~ 24.136424,
                                      river == "Simojoki" ~ 25.052169,
                                      river == "Östersjön (hela) ICES SD 22-32" ~ 19.780140,
                                      .default = NA))) %>%
  left_join(AU_rivers) %>%
  left_join(SU_rivers) %>%
  mutate(region = if_else(stock_unit == "Sweden", "Swedish_westcoast", "Baltic_sea", missing = "Baltic_sea" )) 

# French rivers by region and sub-regions
fra_rivers <- read_csv(file = "/Users/vitl0001/Documents/Projects/DIASPARA/riviere_region_France.csv") %>%
  mutate(river = str_to_title(river),
         stock_unit = "France",
         lat = case_when(river == "Garonne" ~ 45.005921, 
                         river == "Dordogne" ~ 44.998734,
                         river == "Oir" ~ 48.646895,
                         river == "Élorn" ~ 48.417280,
                         river == "Douron" ~ 48.656185,
                         river == "Goyen" ~ 48.027447,
                         river == "Finistere" ~ 48.306467, 
                         river == "Odet" ~ 47.962738,
                         river == "Penze" ~ 48.643562,
                         river == "Aven" ~ 47.842906,
                         river == "Elle" ~ 47.876111,
                         river == "Arques" ~ 49.930103,
                         river == "Bresle" ~ 50.061661,
                         river == "Elorn" ~ 48.415749,
                         .default = NA),
         lon = case_when(river == "Garonne" ~ -0.574534,
                         river == "Dordogne" ~ -0.475130,
                         river == "Oir" ~ -1.380787,
                         river == "Élorn" ~ -4.314318,
                         river == "Douron" ~  -3.659550,
                         river == "Goyen" ~ -4.533051,
                         river == "Finistere" ~ -4.080223,
                         river == "Odet" ~ -4.100464,
                         river == "Penze" ~ -3.950601,
                         river == "Aven" ~  -3.748738,
                         river == "Elle" ~ -3.536609,
                         river == "Arques" ~ 1.085561,
                         river == "Bresle" ~ 1.374828,
                         river == "Elorn" ~ -4.323667,
                         .default = NA))


```

## Length at age combine data

Length at age for adult individuals (remove NA and 0 age individuals)
sex
length correct


```{r}

# Model to get total length from fork length in the french data. Fork lengths in the French data need to be converted to total length. Here I model this relationship as Lt = a*Lf^b and estimate a and b from log(Lt)~log(Lf). This is almost linear but a log(Lt)~log(Lf) relationship makes for a seemingly better fit

fra_sallaa %>%
  filter(total_length > 100) %>% # an obvious outlier where Lf >> Lt
  drop_na(total_length, fork_length) %>%
  lm(log(total_length) ~ log(fork_length), data = .) %>%
  tidy() %>%
  pull(estimate) 

fra_sallaa %>%
  filter(total_length > 100) %>%
  drop_na(total_length, fork_length) %>%
  ggplot(aes(fork_length, total_length)) +
  geom_point() +
  geom_line(aes(x = fork_length,  y = exp(0.2892351)*fork_length^0.9623479), col = "red")


# Combine the data
all_sallaa <- swe_sallaa %>%
  filter(!river %in% c("Vättern", "Vänern"), # remove the lakes in the data
         !age_ad == 0) %>%  # remove age 0 adults
  drop_na(length, age_ad) %>% # remove individuals without length or adult age
  dplyr::select("length", "river", "country", "origin", "year", "AU", "age_ad", "sex") %>%
  bind_rows(fin_sallaa %>% 
              drop_na(length, age_ad) %>% # remove individuals without length or adult age
              dplyr::select("length", "river", "country", "origin", "year", "length", "sex")) %>%
  left_join(swefin_rivers, by = "river") %>%
  mutate(asses_unit = if_else(is.na(AU), asses_unit, AU)) %>% # prefer the existing AU before the new one.
  dplyr::select(!AU) %>%
  bind_rows(fra_sallaa %>%  
              mutate(sex = if_else(is.na('Genetic sex'), 'Sex observed in the field', 'Genetic sex'), # Assuming genetic sex is more accurate than observed and merge info to complete info 
                     length = if_else(is.na(total_length), exp(0.2892351)*fork_length^0.9623479, total_length),
                     length = ifelse(length > 2000, length/10, length)) %>% # Correct one ind. at 7900 mm
              drop_na(age_sm,age_sm,length) %>%
              dplyr::select("river","country", "origin", "year", "length", "age_sm", "age_ad", "sex") %>%
              left_join(fra_rivers))


```

## Map and summary of length at age

```{r}

all_sallaa %>%
  mutate(region2 = if_else(region == "Baltic_sea", paste0(region,":AU-",asses_unit), region)) %>%
  ggplot(aes(age_ad, length, color = region2)) +
  geom_point() +
  facet_wrap(~region2) +
  expand_limits(x = 0)

plot_map_Euro +
  geom_point(data = all_sallaa %>%
               drop_na(lon, lat) %>% 
               mutate(n.years = n_distinct(year), .by=river) %>%
               mutate(Year.count = ifelse(n.years > 14, ">15","<15")) %>%
               add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633), 
             aes(X*1000, Y*1000, color = Year.count), size = 0.5, show.legend = TRUE) +
  theme_sleek(base_size = 6) +
  guides(colour = guide_legend(title.position = "top", title.hjust = 0.5),
         fill = guide_legend(title.position = "top", title.hjust = 0.5)) +
  labs(title = "lat/lon for most French rivers missing")

# ind counts by river
all_sallaa %>%
  mutate(river2 = paste0(country,":",river)) %>%
  drop_na(river) %>%
  summarise(count = n(), .by = c(year, country, river2)) %>%
  mutate(Ind.count = as.factor(ifelse(count > 50, ">50",
                                  ifelse(count > 30 & count <= 50, ">30",
                                         ifelse(count > 10 & count <= 30, ">10",
                                         "<10")))),
         Ind.count = fct_reorder(Ind.count, count)) %>% 
  ggplot(aes(year, river2, fill = Ind.count, group = country)) +
  geom_tile(color = "gray30") +
  scale_fill_viridis_d() +
  theme_light()

# ind counts by spatial 
all_sallaa %>%
  drop_na(river) %>%
  summarise(count = n(), .by = c(year, region,asses_unit)) %>%
  mutate(region2 = if_else(region == "Baltic_sea", paste0(region,":AU-",asses_unit), region),
         Ind.count = as.factor(ifelse(count > 50, ">50",
                                      ifelse(count > 30 & count <= 50, ">30",
                                             ifelse(count > 10 & count <= 30, ">10",
                                                    "<10")))),
         Ind.count = fct_reorder(Ind.count, count)) %>% 
  ggplot(aes(year, region2, fill = Ind.count)) +
  geom_tile(color = "gray30") +
  scale_fill_viridis_d() +
  theme_light()

all_sallaa %>%
  mutate(River = paste0(country,":",river)) %>%
  drop_na(river) %>%
  summarise(n.years = n_distinct(year), .by=river) %>%
  filter(n.years > 14)

all_sallaa %>%
  filter(is.na(asses_unit),
         country != "FRA") %>%
  distinct(river)

```

## Fecundity at length combine data

```{r}
# Model to convert French fork lengths in the fecundity data to total lengths
fra_salfec %>%
  filter(length_t > 100) %>% # an obvious outlier where Lf >> Lt
  drop_na(length_t, length_f) %>%
  lm(log(length_t) ~ log(length_f), data = .) %>%
  tidy() %>%
  pull(estimate) 

fra_salfec %>%
  filter(length_t > 100) %>% # an obvious outlier where Lf >> Lt
  drop_na(length_t, length_f) %>%
  ggplot(aes(length_f, length_t)) +
  geom_point() +
  geom_line(aes(x = length_f,  y = exp(0.05704206)*length_f^0.99670332), col = "red")

# Combine the data
all_salfec <- swe_salfec %>%
  drop_na(length, n_eggs) %>%
  dplyr::select("length", "river", "country", "origin", "year", "n_eggs") %>%
  bind_rows(swe_salfec2 %>% 
              drop_na(length, n_eggs) %>%
              dplyr::select("length", "river", "country", "origin", "year", "n_eggs")) %>%
  bind_rows(fin_salfec1 %>% 
              drop_na(length, n_eggs) %>%
              mutate(length = if_else(length == 85, 850, length)) %>% # correct an obvious error (cm and not mm)
              dplyr::select("length", "river", "country", "origin", "year", "n_eggs")) %>%
  bind_rows(fin_salfec2 %>% 
              drop_na(length, n_eggs) %>%
              dplyr::select("length", "river", "country", "origin", "year", "n_eggs")) %>%
  left_join(swefin_rivers) %>%
  bind_rows(fra_salfec %>%
              mutate(length = if_else(is.na(length_t), exp(0.05704206)*length_f^0.99670332, length_t)) %>%
              drop_na(length, n_eggs) %>%
              dplyr::select("length", "river", "country", "origin", "year", "n_eggs") %>%
              left_join(fra_rivers)) %>%
  mutate(spat_aggr = if_else(is.na(asses_unit), region, paste0("AU:",as.character(asses_unit))))

```

## Map and temporal summary of fecundity

```{r}

# Fecundity at length all data 
all_salfec %>%
  ggplot(aes(length, n_eggs, color = spat_aggr)) +
  geom_point() +
  scale_fill_viridis_d() +
  theme_light()

# map
plot_map_Euro +
  geom_point(data = all_salfec %>% drop_na(lat,lon) %>% add_utm_columns(ll_names = c("lon", "lat"), utm_crs = 32633), aes(X*1000, Y*1000), size = 0.1, color = "deeppink3") 

all_salfec %>%
  summarise(count = n(), .by = c(year, country, origin, spat_aggr)) %>%
  mutate(Ind.count = as.factor(ifelse(count > 50, ">50",
                                  ifelse(count > 30 & count <= 50, ">30",
                                         ifelse(count > 10 & count <= 30, ">10",
                                         "<10")))),
         Ind.count = fct_reorder(Ind.count, count)) %>% 
  ggplot(aes(year, spat_aggr, fill = Ind.count)) +
  geom_tile(color = "gray30") +
  scale_fill_viridis_d() +
  theme_light()

```

