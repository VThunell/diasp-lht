---
title: "Sex ratio model v1" 
author: "Viktor Thunell" 
date: "`r format(Sys.time(),
'%d %B, %Y')`" 
  format: html: 
    page-layout: 
      full embed-resources: true knitr:
opts_chunk: 
fig.align: center out-width: 80% editor: source execute: echo: true
eval: true cache: true
---

## Load libraries
```{r libs}
#| message: false
#| warning: false
#| cache: false

# Load libraries, install if needed
pkgs <- c("tidyverse", "tidylog", "devtools","viridis","nls.multstart", "broom", "patchwork", "rjags", "coda", "boot", "tidybayes","bayesplot")

if(length(setdiff(pkgs,rownames(installed.packages()))) > 0){
    install.packages(setdiff(pkgs, rownames(installed.packages())), dependencies = T)
  }

invisible(lapply(pkgs, library, character.only = T))

options(ggplot2.continuous.colour = "viridis")
theme_set(theme_light()) # check why global theme option not working when rendering
# Set path

home <- here::here()
```

## Read data
```{r}
#| message: false
#| warning: false
#| cache: false

# Sötebasen Salmon
# problems(read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming-data/salmon/LaxindividerSötebasen.txt", locale = locale(encoding="latin1"), delim = "\t")) |>
#    dplyr::select(col, expected) |>
#    unique()
# read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming-data/salmon/LaxindividerSötebasen.txt", locale = locale(encoding="latin1"), delim = "\t")[,c(24,25,33)]

swe_sallaa <- read_delim(file = "/Users/vitl0001/Documents/Projects/DIASPARA/Incoming data/salmon/LaxindividerSötebasen.csv", locale = locale(encoding="latin1"), delim = ";", col_types = cols(Märkning2 = col_character(), Märke2Nr = col_character(), ÅlderLek3 = col_character())) %>%
  rename(age_ad = AdultÅlder,
         age_sm = SmoltÅlder,
         length = Längd,
         weight = Vikt,
         year = Årtal,
         origin = Ursprung,
         sex = Kön,
         river = VattenNamn,
         stage = Stadium
         ) %>%
  mutate(country = "SWE",
         origin = case_when(origin == "Odlad" ~ "reared",
                            origin == "Vild" ~ "wild",
                            .default = origin))
# REMEMBER TO CORRECT THESE THREE Columns if used!!

```

## Model sex ratio

What is the sex ratio, measured as proportion of females, in Swedish salmon and how does it vary within rivers and with salmon origin?

```{r}
# Calculated ratio from data:
swe_sallaa %>% 
  count(sex) %>%
  mutate(Y = prop.table(n)) %>%
  filter(sex == "f") %>%
  pull(Y)
# Y = 0.5134 prop females
# f	3869			
# m	3667

```

I will start with a simple null model and build on this by adding predictors and a hierarchical structure. I've come up with two model approaches for this question:

Alternative 1: Using the binomial as likelihood and beta as prior, the posterior is beta (the beta is the conjugate prior for binomial). In this case the likelihood is the success of being female out all individuals (number of trials). The posterior is the probability density of proportion female in the population. Building this as a linear model with predictors (orgon and age seperately below) I instead use priors with normal distributions on the paramters (alpha and beta)

Alternative 2: Null model of proportion females $Y$ in river $i$ modeled using a beta likelihood and prior on the hyper parameters of the beta which we get from the overall number of females and males in the data (shape parameters a and b). The posterior would give probabilities of proportion females (?). Building this into a hierachial model, I could model the variation within rivers as a function of e.g. age or origin (reared/wild). (Update text)

Model description for Alternative 1 with beta prior with shape paramters a and b.
$$Y_i~ \sim Binomial(a, b)$$
$$logit(\mu_i) = \alpha + \beta x_i$$
Beta prior moments... Why have i added this?
$$a_i = \frac{(\mu_i^2 - \mu_i^3 - \mu_i\sigma^2)} {\sigma^2}$$
$$b_i = \frac{(\mu_i - 2\mu_i^2 + \mu_i^3 - \sigma^2+ \mu_i\sigma^2)} {\sigma^2}$$
with normal prior on linear model parameters 

```{r beta dist}
set.seed(123)
p1 <- rbeta(n = 10000, shape1 = 5, shape2 = 5)
p2 <- rbeta(n = 10000, shape1 = 5000, shape2 = 5000)

#dbeta(x = 1, shape1 = 1, shape2 = 1)
prior_sim <- data.frame(p1,p2)

# Construct a density plot of the prior sample
ggplot(prior_sim, aes(x = p1)) + 
  geom_density() +
ggplot(prior_sim, aes(x = p2)) + 
  geom_density()

```

Priors with shape parameters a = 1 and b = 1
$$ \alpha ~ \sim beta(1, 1)$$

## Model Alternative 1
Using the binomial as likelihood and beta as prior (beta-binomial distribution?), the posterior is beta (the beta is the conjugate prior for binomial). In this case the likelihood is the success of being female out all individuals (number of trials).

### Simplest model without predictors and not hierarchial
```{r}
# data 
sal_ind1 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult")

# params for dbin
n_fem <- sal_ind1 %>% filter(sex == "f") %>% summarise(n=n()) %>% pull(n) # number success
n <- sal_ind1 %>% summarise(n=n()) %>% pull(n) # number of trials

# Spec model (BUGS-language description)
propfem_model_2 <- "model{
    # Likelihood model for X
    X ~ dbin(p, n)
    
    # Prior model for p
    p ~ dbeta(a, b)
}"

# Build the model    
propfem_jags <- jags.model(textConnection(propfem_model_2), 
    data = list(a = 1, b = 1, X = n_fem, n = n),
    n.chains = 2,
    inits = list(p=0.5)
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=10000
n.thin=1
is(propfem_jags)
samples = coda.samples(propfem_jags, 
                       variable.names = c("p","X"),
                       n.iter = iters,
                       thin = n.thin)

# summarise and look at the mcmc trace
summary(samples) # X is the number of female individuals in the data (n_fem)
mcmc_trace(samples, pars = "p") +
  theme_light()
mcmc_intervals(samples, pars = c("p"))

#compare the posterior with correponding plot of the binomial based on random samples and the n_fem and number of males as shape parameters
tidy_draws(samples) %>% filter(.chain == 1) %>%
  ggplot() + 
  geom_density(aes(x = p), color = "red") +
  geom_density(data=data.frame(p = rbeta(n = 8000, shape1 = 3869, shape2 = 3667)), aes(x = p)) +
  theme_light() 


```

### Add origin as linear predictor (and rivers are observations, hmmm..)
Origin is wild/reared in the data. Sex ratio might vary between these origins. Two approaches: add origin as predictor or make hiearchical. I do the predictor approach. 

```{r}
# calculate frequency of females 
swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(n = n(), .by = c(origin, sex, river)) %>%
  mutate(freq = n / sum(n),.by=c(origin,river)) %>%
  filter(sex=="f", origin=="reared") %>%
  arrange(river)

# filter and summarise data
sal_ind2 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(obs = n(), .by = c(sex, origin, river)) %>%
  mutate(obs_tot = sum(obs), .by = c(origin, river),
         origin2 = if_else(origin == "reared", 0, 1)) %>%
  filter(sex == "f")

# params for dbin prior if using a beta, overall ratio
# n_fem <- sal_ind2 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
n_tot <- sal_ind2 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials

# Spec model (BUGS-language description)
propfem_model_2 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    logit(p[i]) <- alpha + b1*origin2[i]
    
    }
    
  # Priors 
    b1 ~ dnorm(0,.0001)
    alpha ~ dnorm(0,.0001)
    
}"

data = c(sal_ind2 %>% select(obs, river, origin2, obs_tot) %>% as.list(),
             list(n_fem=n_fem, n_tot = n_tot, nobs = nrow(sal_ind2)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_2), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    inits = list(
      list(b1=-0.1,alpha=5),
      list(b1=0,alpha=10))
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha","p[1]"),
                       n.iter = iters,
                       thin = n.thin)

# the mcmc trace
mcmc_trace(samples, pars = c("b1", "alpha", "p[1]")) +
  theme_light()

mcmc_intervals(samples, pars = c("b1", "alpha"))

# posterior probabilities of proportion females in reared and wild salmon (logit to probs)
tidy_draws(samples) %>% filter(.chain == 1) %>%
  ggplot() + 
  geom_density(aes(x = exp(alpha+b1)/(1+exp(alpha+b1))), color = "red") + # wild 
  geom_density(aes(x = exp(alpha)/(1+exp(alpha)))) + # reared
  theme_light()

# no difference
```

# Proportion females dependent on adult age?
Binomial model the probability of number of females in a sample as a function of age.
```{r}

# filter and summarise data
sal_ind3 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(obs = n(), .by = c(sex, river, age_ad)) %>%
  mutate(obs_tot = sum(obs), .by = c(river, age_ad))%>%
  filter(sex == "f")
  

# the relationship between age and proportion returning females looks a bit curved but we can also asumme its linear
sal_ind3 %>%
  ggplot(aes(age_ad, obs/obs_tot)) +
  geom_point() +
  stat_smooth(method = "gam", formula = y ~ s(x, k=3)) +
  stat_smooth(method = "lm", se = FALSE, color = "red") 

# params for dbin prior if using a beta, overall ratio
# n_fem <- sal_ind2 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
n_tot <- sal_ind3 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials

# Spec model
propfem_model_3 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    logit(p[i]) <- alpha + b1*age_ad[i]
    
    }
    
  # Priors 
    b1 ~ dnorm(0,.000001)
    alpha ~ dnorm(0,.000001)
  
  # Predictions
    est_a1 <- alpha + b1*1
    est_a2 <- alpha + b1*2
    est_a3 <- alpha + b1*3
    est_a4 <- alpha + b1*4

}"

data = c(sal_ind3 %>% select(obs, river, age_ad, obs_tot) %>% as.list(),
             list(n_fem=n_fem, n_tot = n_tot, nobs = nrow(sal_ind3)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_3), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
     # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
     # list(b1=-0.1,alpha=5, est_a1 = 0.5),
     #list(b1=0,alpha=10))
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha","est_a1","est_a2","est_a3", "est_a4"),
                       n.iter = iters,
                       thin = n.thin)

# the mcmc trace
mcmc_trace(samples, pars = c("b1","alpha","est_a1","est_a2","est_a3", "est_a4")) +
  theme_light()

#gelman.diag() # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesn't seem to work when predictions are in the samples. 

mcmc_intervals(samples, pars = c("b1", "alpha"))

# posterior probabilities of proportion females in reared and wild salmon (logit to probs)
tidy_draws(samples) %>% filter(.chain == 1) %>%
  ggplot() + 
  geom_density(aes(x = exp(b1)/(1+exp(b1))), color = "red") + # age parameter estimate natural scale 
  geom_density(aes(x = exp(alpha)/(1+exp(alpha)))) + # age parameter estimate natural scale
  theme_light() +
tidy_draws(samples) %>% filter(.chain == 1) %>%
  ggplot() +
  geom_density(aes(x = b1, color = "red")) + # age parameter estimate
  geom_density(aes(x = alpha)) + # age parameter estimate
  theme_light()

tsamples <- tidy_draws(samples) %>%
  mutate(b1 = exp(b1)/(1+exp(b1)),
         alpha = exp(alpha)/(1+exp(alpha)),
         est_a1 = exp(est_a1)/(1+exp(est_a1)),
         est_a2 = exp(est_a2)/(1+exp(est_a2)),
         est_a3 = exp(est_a3)/(1+exp(est_a3)),
         est_a4 = exp(est_a4)/(1+exp(est_a4)))

tidy_draws(tsamples) %>% filter(.chain == 1) %>%
  pivot_longer(cols = c(est_a1, est_a2, est_a3, est_a4), values_to = "est", names_to = "age") %>%
  ggplot() + 
  geom_density(aes(x = est, color = age)) +
  theme_light()

# Plot the posterior mean regression model, why does this look good???
sal_ind3 %>%
  ggplot(aes(obs_tot, obs)) +
  geom_point() +
  geom_abline(intercept = mean(tsamples$alpha), slope = mean(tsamples$b1), color = "red") +
  labs(y= "obs female", y = "obs tot")
```
                
## Hierarchial way
So we know that within rivers sex ratios differs between groups of fish of different age. In the previous model, we are calculating the sex ratio of each age group and the uncertainty around these estimates are based on the uncertainty on the intercept and slope parameters. By modelling this hierarchically, I make use of the information of population female proportion when estimating the fem prop of each age group. Using the beta binomial as in the first model but with probability of success varying independently between age groups (maybe a bit unreasonable assumption). Then the beta distribution is the prior for binomial probability and I put hyper priors on the beta shape parameters a and b.

```{r}

# filter and summarise data between ages instead of rivers. 
sal_ind4 <- swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         age_ad > 0,
         !is.na(length),
         stage == "Adult",
         !is.na(origin)) %>%
  summarise(obs = n(), .by = c(sex, age_ad)) %>%
  mutate(obs_tot = sum(obs), .by = c(age_ad))%>%
  filter(sex == "f")

# proportion returning females between groups
sal_ind4 %>%
  ggplot(aes(as.factor(age_ad), obs/obs_tot)) +
  geom_boxplot()
  geom_point()


# Spec model
propfem_model_4 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    }
  
  # Prior for p
  
  for (i in 1:nobs){
  
   p[i] ~ dbeta(a, b)
   
  }
    
  # hyperpriors using very simple prior info
  a = n_succ
  b = n_fail

}"

n_tot <- sal_ind4 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials
n_femtot <- sal_ind4 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
n_maltot <- n_tot - n_femtot # number fails

data = c(sal_ind4 %>% select(obs, obs_tot, age_ad) %>% as.list(), 
         list(n_succ = n_femtot, n_fail = n_maltot, n_tot = n_tot, nobs = nrow(sal_ind4)))
         #list(mub = 1, mua = 1 , logn = log(100), n_tot = n_tot, nobs = nrow(sal_ind4)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_4), 
    data = data,
    n.chains = 2,
    n.adapt = 1000,
    # inits = list( # hashed to use generated itis by jags () "JAGS user manual V 4.3.0 (section 3.3.1) states that "the value selected by the function is usually the mean, median or mode of the distribution of the stochastic node (https://nandinidendukuri.com/blogposts/2023-10-12-initial-values-in-rjags/)"
  )

# mcmc burn-in
burn.in=10000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=50000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = "p",
                       #variable.names = c("b1","alpha","est_a2","est_a3"),
                       n.iter = iters,
                       thin = n.thin)
summary(samples)
mcmc_trace(samples)

gelman.diag(samples) # "approximate convergence is diagnosed when the upper limit is close to 1"
# doesnt work when predictions are in the samples...

mcmc_intervals(samples)

# age_ad seems to be equal to ag_ad2 so I can just rename the group levels 
#sal_ind4 %>% mutate(age_ad2 = as.numeric(as.factor(age_ad))) %>% select(age_ad, age_ad2) %>% distinct()

gather_draws(samples, p[i]) %>% filter(.chain == 1) %>%
#median_qi()
  ggplot() + 
  geom_density(aes(x = .value, color = factor(i))) + # age parameter i
  theme_light() +

```
This is completely different from the reuslt from the previo model with regression predicting the female proportion from age. One reason may be that this model does not make use of the information that rivers.


## The above is a model of the ratio in absolute terms, a binomial model. Beta may be better..
```{r}
sal_ind3 <- 
  swe_sallaa %>%
  filter(!sex %in% c("iu","o",NA),
         !river %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult") %>%
  # mutate(obs_tot = count(), .by = c(origin, river)),
  #        origin2 = if_else(origin == "female", 0, 1)) %>%
  count(sex, river, origin) %>%
  summarise(fem_prop = prop.table(n), .by = c(origin, ) ) %>%
  summarise(prop = n(), .by = c(sex, origin, river)) %>%
  mutate(obs_tot = sum(obs), .by = c(origin, river),
         origin2 = if_else(origin == "female", 0, 1)) %>%
  filter(!is.na(origin),
         sex == "f")

# params for dbin prior if using a beta, overall ratio
# n_fem <- sal_ind2 %>% summarise(sum=sum(obs)) %>% pull(sum) # number success
# n_tot <- sal_ind2 %>% summarise(sum=sum(obs_tot)) %>% pull(sum) # number of trials

# Spec model (BUGS-language description)
propfem_model_2 <- "model{
  # Likelihood model for X
    
  for(i in 1:nobs){
    
    obs[i] ~ dbin(p[i], obs_tot[i])
  
    logit(p[i]) <- alpha + b1*origin2[i]
    
    }
    
  # Priors 
    b1 ~ dnorm(0,.001)
    alpha ~ dnorm(0,.001)
    
}"

data = c(sal_ind2 %>% select(obs, river, origin2, obs_tot) %>% as.list(),
             list(n_fem=n_fem, n_tot = n_tot, nobs = nrow(sal_ind2)))

# Build the model
propfem_jags <- jags.model(textConnection(propfem_model_2), 
    data = data,
    n.chains = 3,
    n.adapt = 1000,
    inits = list(
      list(b1=-0.1,alpha=5),
      list(b1=0,alpha=10),
      list(b1=0.1,alpha=-20))
  )

# mcmc burn-in
burn.in=1000000
update(propfem_jags, n.iter=burn.in)

# produce more samples and a mcmc.list object
iters=500000
n.thin=10

samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha"),
                       n.iter = iters,
                       thin = n.thin)

# the mcmc trace
mcmc_trace(samples, pars = c("b1", "alpha")) +
  theme_light()

# update and check trace
update(propfem_jags, n.iter=burn.in)
samples = coda.samples(propfem_jags, 
                       variable.names = c("b1","alpha"),
                       n.iter = iters,
                       thin = n.thin)
mcmc_trace(samples, pars = c("b1", "alpha") ) +
  theme_light()

```

### Model Alternative 2
```{r rjags model}

propfem_model_1 <- "model{
    # Likelihood model for Y[i]
    for(i in 1:length(data$freq)){
    
    Y[i]~dbeta(a[i],b)
    
  	a[i] <-  
  }	

    # Prior model for a
    p ~ dbeta(,)
}"


data <- sb_salind %>%
  filter(!sex %in% c("iu","o",NA),
         #!VattenNamn %in% c("Västerhavet (hela) ICES SD 20-21", "Östersjön (hela) ICES SD 22-32"),
         !is.na(age_ad),
         !is.na(length),
         stage == "Adult") %>%
  count(sex, VattenNamn, origin) %>%
  mutate(Y = prop.table(n), .by = c(VattenNamn, origin) ) %>%
  filter(sex == "f",
         Y < 1) %>%
  select(Y,VattenNamn) %>%
  as.list()

# inits=list(
#   list(
#     
#   ))

# model = paste0(home, "/R/models/JAGS_bird1.R")
#                  
# jm = jags.model(model,
#                 data=data, 
#                 n.adapt=5000, 
#                 inits=inits, 
#                 n.chains=1)
# 
# burn.in=10000
# 
# update(jm, n.iter=burn.in) 
# 
# samples=10000
# n.thin=5
# 
# #for exercise 1, 4 and 7
# zc = coda.samples(jm,
#                   variable.names=c("alpha", "b1", "sigma"),
#                   n.iter=samples,
#                   thin=n.thin)
# 
# summary(zc)
# plot(zc) 

```

```{r}
> mcmc <- data.frame(rbind(samples[[1]], samples[[2]]))
> mcmc <- mutate(mcmc, 
+   chain=factor(rep(c(1,2),c(5000,5000))),
+   iteration = rep(1:5000, 2))
> r <- 5000 / (5*range(mcmc$bdistance) %*% c(-1,1) )
> ggplot(mcmc, aes(iteration, bdistance, color=chain)) + geom_line() + 
+   coord_fixed(ratio=r)
```

